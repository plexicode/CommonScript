import testlib -> *;

function main(args) {
    stringTests();
    listTests();
    dictTests();
    functionTests();

    print("ALL DONE");
}

function stringTests() {

    s = 'Hello, World!';
    assertStrEqual(s.upper(), 'HELLO, WORLD!');
    assertStrEqual(s.lower(), 'hello, world!');
    assertStrEqual(s.split('l').join('|'), 'He||o, Wor|d!');

    s = 'ABC\n';
    assertStrEqual(s.getCodePoint(0), 65);
    assertStrEqual(s.getCodePoint(1), 66);
    assertStrEqual(s.getCodePoint(2), 67);
    assertStrEqual(s.getCodePoint(-1), 10);
    assertStrEqual(s.toUnicodePoints().join(' '), '65 66 67 10');

    /*
    // TODO: implement this (and the others, of course)
    assertStrEqual(s.find('x'), -1);
    assertStrEqual(s.find('l'), 2);
    assertStrEqual(s.find('ll'), 2);
    assertStrEqual(s.find('l', 4), 10);
    assertStrEqual(s.find('l', 4, 8), -1);
    //*/
}

function listTests() {
    items = [];
    assertStrEqual(items.length, 0);
    items.add(1);
    items.add(2);
    assertStrEqual(items.join('|'), '1|2');
    cloned = items.clone();
    items.clear();
    assertStrEqual(items.length, 0);
    assertStrEqual(items.join(', '), '');
    assertStrEqual(cloned.join(', '), '1, 2');

    items = [1, 2, 3];
    assertStrEqual(items.pop(), 3);
    assertStrEqual(items.join('|'), '1|2');
    assertStrEqual(items.pop(), 2);
    assertStrEqual(items.join('|'), '1');
    assertStrEqual(items.pop(), 1);
    assertStrEqual(items.join('|'), '');

    err = null;
    try {
        items.pop();
    } catch (e) {
        err = e.message;
    }
    assertStrEqual(err, 'Cannot pop from an empty list.');

    items = [7, 2, 1, 8, 6, 3, 4, 5];
    items.sort();
    assertStrEqual(items.join(' '), '1 2 3 4 5 6 7 8');

    items = [7, 2, 1, 8, 6, 3, 4, 5];
    items.sort(funnySort);
    assertStrEqual(items.join(' '), '2 4 6 8 1 3 5 7');

    food = 'milk eggs bananas coffee apricots cheese tea bread pizzarolls(TM)';
    items = food.split(' ');
    items.sort();
    assertStrEqual(items.join(' '), 'apricots bananas bread cheese coffee eggs milk pizzarolls(TM) tea');

    items = food.split(' ');
    // also tests stable sort with strings of the same length.
    items.sortByKey(getLength);
    assertStrEqual(items.join(' '), 'tea milk eggs bread coffee cheese bananas apricots pizzarolls(TM)');

    items = [2, 4, 6, 8];
    items.reverse();
    assertStrEqual(items.join(' '), '8 6 4 2');

    items = [1, 2, 3, 4, 5];
    t = items.remove(2);
    assertStrEqual(t, 3);
    assertStrEqual(items.join(' '), '1 2 4 5');
    assertStrEqual(items.remove(-1), 5);
    assertStrEqual(items.join(' '), '1 2 4');
    assertStrEqual(items.length, 3);
    items.insert('zero', 0);
    assertStrEqual(items.join(' '), 'zero 1 2 4');
    assertStrEqual(items.length, 4);
    items.insert('three', 3);
    assertStrEqual(items.join(' '), 'zero 1 2 three 4');
    assertStrEqual(items.length, 5);

    ptr1 = [];
    ptr2 = {};
    items = ['a', 'b', 'cat', true, false, null, ptr1, ptr2, 3.25, 7, -1, 0];
    assertStrEqual(items.find('a'), 0);
    assertStrEqual(items.find('cat'), 2);
    assertStrEqual(items.find('dog'), -1);
    assertStrEqual(items.find(true), 3);
    assertStrEqual(items.find(false), 4);
    assertStrEqual(items.find(null), 5);
    assertStrEqual(items.find(ptr1), 6);
    assertStrEqual(items.find(ptr2), 7);
    assertStrEqual(items.find([]), -1);
    assertStrEqual(items.find({}), -1);
    assertStrEqual(items.find(3.25), 8);
    assertStrEqual(items.find(7), 9);
    assertStrEqual(items.find(-1), 10);
    assertStrEqual(items.find(0), 11);
    assertStrEqual(items.find(4), -1);

    assertStrEqual(items.find(ptr1, 3), 6);
    assertStrEqual(items.find(ptr1, 6), 6);
    assertStrEqual(items.find(ptr1, 7), -1);

    assertStrEqual(items.find(ptr1, 0, 7), 6);
    assertStrEqual(items.find(ptr1, 0, 6), -1);
    assertStrEqual(items.find(ptr1, 3, 7), 6);
    assertStrEqual(items.find(ptr1, 6, 7), 6);
    assertStrEqual(items.find(ptr1, 6, 6), -1);

    assertStrEqual(items.findReverse(ptr1, -1, 5), 6);
    assertStrEqual(items.findReverse(ptr1, -1, 6), -1);
    assertStrEqual(items.findReverse(ptr1, -2, 5), 6);
    assertStrEqual(items.findReverse(ptr1, 6, 5), 6);
    assertStrEqual(items.findReverse(ptr1, 5, 5), -1);
}

function getLength(x) { return x.length; }

function funnySort(a, b) {
    isLeftEven = a % 2 == 0;
    isRightEven = b % 2 == 0;
    if (isLeftEven != isRightEven) return isLeftEven ? -1 : 1;
    return a - b;
}

function dictTests() {
    a = {};
    assertStrEqual(a.contains(1), false);
    a[2] = '';
    assertStrEqual(a.contains(1), false);
    assertStrEqual(a.contains(2), true);
    assertStrEqual(a.contains(''), false);

    a = {};
    assertStrEqual(a.contains('k'), false);
    a['k'] = 1;
    assertStrEqual(a.contains('k'), true);
    assertStrEqual(a.contains('x'), false);
    a['k'] = false;
    assertStrEqual(a.contains('k'), true);

    // Internally, dictionaries are a pair of key and value arrays with a
    // key-to-index lookup.
    // When a kvp is removed that isn't at the end of the array, the last entry
    // is moved to take its place.

    dict = {};
    dict[1] = 'A';
    dict[2] = 'B';
    dict[3] = 'C';
    dict[4] = 'D';
    assertStrEqual(dict.keys().join(' '), '1 2 3 4');
    dict.remove(2);
    assertStrEqual(dict.keys().join(' '), '1 4 3');
    dict.remove(3);
    assertStrEqual(dict.keys().join(' '), '1 4');
    dict.remove(1);
    assertStrEqual(dict.keys().join(' '), '4');
    dict.remove(4);
    assertStrEqual(dict.keys().join(' '), '');

    dict['A'] = 1;
    dict['B'] = 2;
    dict['C'] = 3;
    dict['D'] = 4;
    assertStrEqual(dict.keys().join(' '), 'A B C D');
    dict.remove('B');
    assertStrEqual(dict.keys().join(' '), 'A D C');
    dict.remove('C');
    assertStrEqual(dict.keys().join(' '), 'A D');
    dict.remove('A');
    assertStrEqual(dict.keys().join(' '), 'D');
    dict.remove('D');
    assertStrEqual(dict.keys().join(' '), '');

    dict = { 'a': 1, 'b': 2 };
    assertStrEqual(dict.keys().join(' '), 'a b');
    assertStrEqual(dict.get('a'), 1);
    assertStrEqual(dict.get('b', 'B'), 2);
    assertStrEqual(dict.get('c'), null);
    assertStrEqual(dict.get('d', 'D'), 'D');

    kvplist = dict.map((k, v) => k + '|' + v );
    assertStrEqual(kvplist.join(', '), 'a|1, b|2');

    dict2 = dict.clone();
    dict2['c'] = 3;
    assertStrEqual(dict.keys().join(' '), 'a b');
    assertStrEqual(dict.values().join(' '), '1 2');
    assertStrEqual(dict2.keys().join(' '), 'a b c');
    assertStrEqual(dict2.values().join(' '), '1 2 3');

    dict.clear();
    assertStrEqual(dict.keys().join(' '), '');
}

function funcTestTestFunc(a, b, c) {
    return a + b * c;
}

function functionTests() {
    res = funcTestTestFunc(1, 2, 3);
    assertStrEqual(res, 7);
    res2 = funcTestTestFunc.invoke([2, 2, 3]);
    assertStrEqual(res2, 8);
}
