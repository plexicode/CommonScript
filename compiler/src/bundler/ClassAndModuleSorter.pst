// When set to true, considerBaseClasses will ensure the order of the output list 
// will have parent classes before their child implementing classes.
Array<ClassEntity> ClassSorter_SortClassesInDeterministicDependencyOrder(Array<ClassEntity> unorderedClasses, bool considerBaseClasses) {
    int i = 0;

    Dictionary<string, int> classDepthByFqName = new Dictionary<string, int>();
    Dictionary<string, ClassEntity> classByLexicalKey = new Dictionary<string, ClassEntity>();
    ClassEntity cls = null;

    int padSize = Convert.intToString(unorderedClasses.size()).size() + 1;

    for (i = 0; i < unorderedClasses.size(); i += 1) {
        cls = unorderedClasses[i];
        int depth = 1;
        if (considerBaseClasses) depth = ClassSorter_calcDepth(cls, classDepthByFqName);
        string key = PadIntegerToSize(depth, padSize) + ":" + cls.baseData.fqName;
        classByLexicalKey[key] = cls;
    }

    Array<string> keys = Sorting.getLexicalSortedCopy(classByLexicalKey.keys());
    Array<ClassEntity> output = new Array<ClassEntity>(keys.size());
    for (i = 0; i < keys.size(); i += 1) {
        output[i] = classByLexicalKey[keys[i]];
    }
    return output;
}

int ClassSorter_calcDepth(ClassEntity cls, Dictionary<string, int> depthByName) {
    string fqName = cls.baseData.fqName;
    if (depthByName.contains(fqName)) return depthByName[fqName];
    if (cls.baseClassEntity == null) {
        depthByName[fqName] = 1;
        return 1;
    }

    int depth = ClassSorter_calcDepth(cls.baseClassEntity, depthByName) + 1;
    depthByName[fqName] = depth;
    return depth;
}

Array<CompiledModule> getDeterministOrderOfModules(Array<CompiledModule> modules) {
    int i = 0;
    Dictionary<string, CompiledModule> lookup = new Dictionary<string, CompiledModule>();
    for (i = 0; i < modules.size(); i += 1) {
        lookup[modules[i].id] = modules[i];
    }

    Array<string> keys = Sorting.getLexicalSortedCopy(lookup.keys());
    List<CompiledModule> output = new List<CompiledModule>();
    for (i = 0; i < keys.size(); i += 1) {
        output.add(lookup[keys[i]]);
    }
    return output.toArray();
}
