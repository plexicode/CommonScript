Array<ClassEntity> SortClassesInDeterministicDependencyOrder(Array<ClassEntity> unorderedClasses) {
    int i = 0;
    
    Dictionary<string, int> classDepthByFqName = new Dictionary<string, int>();
    Dictionary<string, ClassEntity> classByLexicalKey = new Dictionary<string, ClassEntity>();
    ClassEntity cls = null;
    
    int padSize = Core.IntToString(unorderedClasses.Size()).Size() + 1;

    for (i = 0; i < unorderedClasses.Size(); i += 1) {
        cls = unorderedClasses[i];
        int depth = ClassSorter_calcDepth(cls, classDepthByFqName);
        string key = PadIntegerToSize(depth, padSize) + ":" + cls.baseData.fqName;
        classByLexicalKey[key] = cls;
    }

    Array<string> keys = Core.SortedCopyOfStringArray(classByLexicalKey.Keys());
    Array<ClassEntity> output = new Array<ClassEntity>(keys.Size());
    for (i = 0; i < keys.Size(); i += 1) {
        output[i] = classByLexicalKey[keys[i]];
    }
    return output;
}

int ClassSorter_calcDepth(ClassEntity cls, Dictionary<string, int> depthByName) {
    string fqName = cls.baseData.fqName;
    if (depthByName.Contains(fqName)) return depthByName[fqName];
    if (cls.baseClassEntity == null) {
        depthByName[fqName] = 1;
        return 1;
    }

    int depth = ClassSorter_calcDepth(cls.baseClassEntity, depthByName) + 1;
    depthByName[fqName] = depth;
    return depth;
}
