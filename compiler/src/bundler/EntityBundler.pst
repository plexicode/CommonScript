
void bundleEntity(StaticContext staticCtx, AbstractEntity entity, CompilationBundle bundle) {
    switch (entity.type) {
        case EntityType.CONST:
            // these are already flattened into expressions and have no more use.
            break;

        case EntityType.CLASS:
            bundleClass((ClassEntity)entity.specificData, bundle);
            break;

        case EntityType.ENUM:
            bundleEnum((EnumEntity)entity.specificData, bundle);
            break;

        case EntityType.FIELD:
            fail("not implemented");
            break;

        case EntityType.FUNCTION:
        case EntityType.CONSTRUCTOR:
        case EntityType.LAMBDA_ENTITY:
            bundleFunction(staticCtx, (FunctionEntity)entity.specificData, bundle);
            break;

        case EntityType.PROPERTY:
            fail("not implemented");
            break;

        default:
            fail(""); // invalid operation
            break;
    }
}

void bundleClass(ClassEntity classEntity, CompilationBundle bundle) {
    int baseClassId = 0;
    if (classEntity.baseClassEntity != null) {
        baseClassId = classEntity.baseClassEntity.baseData.serializationIndex;
    }

    Dictionary<string, AbstractEntity> mems = classEntity.classMembers;
    
    int staticCtorId = 0;
    if (mems.contains("@cctor")) staticCtorId = mems["@cctor"].serializationIndex;
    
    BundleClassInfo bci = BundleClassInfo_new(
        classEntity.baseData.serializationIndex,
        baseClassId,
        classEntity.baseData.simpleName,
        mems["@ctor"].serializationIndex,
        staticCtorId,
        new Dictionary<string, int>(),
        classEntity.newDirectMemberOffsets,
        new List<string>(),
        new List<string>());

    Array<string> classMemberNames = classEntity.classMembers.keys(); // going into lookup, unsorted is okay
    for (int i = 0; i < classMemberNames.size(); i += 1) {
        string memberName = classMemberNames[i];
        AbstractEntity member = classEntity.classMembers[memberName];
        switch (member.type) {
            case EntityType.FUNCTION:
                bci.methodsToId[memberName] = member.serializationIndex;
                if (member.isStatic) bci.staticMethods.add(memberName);
                break;
            
            case EntityType.FIELD:
                if (member.isStatic) bci.staticFields.add(memberName);
                break;
            
            case EntityType.CONSTRUCTOR:
                break; // already handled.
            
            default:
                fail("Not implemented");
                break;
        }
    }

    bundle.classById.add(bci);
}

void bundleEnum(EnumEntity enumEntity, CompilationBundle bundle) {
    BundleEnumInfo bei = BundleEnumInfo_createFromEntity(enumEntity);
    bundle.enumById.add(bei);
}

void bundleFunction(StaticContext staticCtx, FunctionEntity entity, CompilationBundle bundle) {
    int i = 0;
    
    bool isLambda = entity.baseData.type == EntityType.LAMBDA_ENTITY;
    ByteCodeBuffer buffer = null;
    int argc = entity.argTokens.size();
    int argcMin = 0;
    for (i = 0; i < argc; i += 1) {
        Token argToken = entity.argTokens[i];
        Expression argValue = entity.argDefaultValues[i];

        ByteCodeBuffer argBuffer = null;
        if (argValue == null) {
            argcMin += 1;
            argBuffer = create1(OP_PUSH_ARG, argToken, null, i);
        } else {
            ByteCodeBuffer defaultValBuffer = serializeExpression(staticCtx, argValue);
            argBuffer = create2(OP_PUSH_ARG_IF_PRESENT, argToken, null, i, defaultValBuffer.length);
            argBuffer = join2(argBuffer, defaultValBuffer);
        }

        buffer = join3(
            buffer,
            argBuffer,
            create0(OP_ASSIGN_VAR, argToken, argToken.Value));
    }

    for (i = 0; i < entity.code.size(); i += 1) {
        Statement stmnt = entity.code[i];
        buffer = join2(buffer, serializeStatement(staticCtx, stmnt));
    }
    
    Array<ByteCodeRow> flatByteCode = flatten(buffer);
    List<ByteCodeRow> byteCodeFinal = new List<ByteCodeRow>();
    for (i = 0; i < flatByteCode.size(); i += 1) {
        byteCodeFinal.add(flatByteCode[i]);
    }

    for (i = 0; i < byteCodeFinal.size(); i += 1) {
        ByteCodeRow row = byteCodeFinal[i];
        if (row.opCode <= 0) fail(""); // break or continue was not resolved.
        if (row.tryCatchInfo != null) {
            Array<int> tryInfoArgs = row.tryCatchInfo;
            tryInfoArgs[0] = i - byteCodeFinal.size();
            ByteCodeRow tryInfoRow = ByteCodeRow_new(OP_TRY_INFO, null, null, tryInfoArgs);
            byteCodeFinal.add(tryInfoRow);
        }
    }

    string fnName = null;
    if (!isLambda) fnName = entity.baseData.simpleName;
    BundleFunctionInfo fd = BundleFunctionInfo_new(
        byteCodeFinal, 
        argcMin, 
        argc, 
        fnName);
    
    if (isLambda) {
        bundle.lambdaById.add(fd);
    } else {
        bundle.functionById.add(fd);
    }
}
