
ByteCodeBuffer serializeStatement(StaticContext staticCtx, Statement stmnt) {
    switch (stmnt.type) {
        case StatementType.ASSIGNMENT:
            string op = stmnt.assignOp.Value;
            
            if (op != "=") op = op.subString(0, op.size() - 1);
            
            switch (stmnt.assignTarget.type) {
                case ExpressionType.VARIABLE: return serializeAssignVariable(staticCtx, stmnt, op);
                case ExpressionType.INDEX: return serializeAssignIndex(staticCtx, stmnt, op);
                case ExpressionType.DOT_FIELD: return serializeAssignField(staticCtx, stmnt, op);
            }

            // should have been removed by now.
            fail(""); 
            return null;

        case StatementType.BREAK: return serializeBreak(stmnt);
        case StatementType.CONTINUE: return serializeContinue(stmnt);
        case StatementType.DO_WHILE_LOOP: return serializeDoWhileLoop(staticCtx, stmnt);
        case StatementType.EXPRESSION_AS_STATEMENT: return serializeExpressionStatement(staticCtx, stmnt);
        case StatementType.FOR_LOOP: return serializeForLoop(staticCtx, stmnt);
        case StatementType.FOR_EACH_LOOP: return serializeForEachLoop(staticCtx, stmnt);
        case StatementType.IF_STATEMENT: return serializeIfStatement(staticCtx, stmnt);
        case StatementType.RETURN: return serializeReturn(staticCtx, stmnt);
        case StatementType.SWITCH_STATEMENT: return serializeSwitchStatement(staticCtx, stmnt);
        case StatementType.THROW: return serializeThrowStatement(staticCtx, stmnt);
        case StatementType.TRY: return serializeTryStatement(staticCtx, stmnt);
        case StatementType.WHILE_LOOP: return serializeWhileLoop(staticCtx, stmnt);

        default:
            fail(""); // not implemented
            return null;
    }
}

ByteCodeBuffer serializeCodeBlock(StaticContext staticCtx, Array<Statement> block) {
    ByteCodeBuffer buf = null;
    for (int i = 0; i < block.size(); i += 1) {
        buf = join2(buf, serializeStatement(staticCtx, block[i]));
    }
    return buf;
}

ByteCodeBuffer serializeAssignVariable(StaticContext staticCtx, Statement assignVar, string baseOp) {
    ByteCodeBuffer bufVal = serializeExpression(staticCtx, assignVar.assignValue);
    ByteCodeBuffer bufVar = serializeExpression(staticCtx, assignVar.assignTarget);
    if (baseOp != "=") {
        bufVal = join3(
            bufVar,
            bufVal,
            create0(OP_BIN_OP, assignVar.assignOp, baseOp));
    }

    return join2(
        bufVal,
        create0(OP_ASSIGN_VAR, assignVar.assignOp, assignVar.assignTarget.strVal));
}

ByteCodeBuffer serializeAssignIndex(StaticContext staticCtx, Statement assignIndex, string baseOp) {
    Token bracketToken = assignIndex.assignTarget.opToken;
    ByteCodeBuffer bufVal = serializeExpression(staticCtx, assignIndex.assignValue);
    ByteCodeBuffer bufIndex = serializeExpression(staticCtx, assignIndex.assignTarget.right);
    ByteCodeBuffer bufRoot = serializeExpression(staticCtx, assignIndex.assignTarget.root);
    if (baseOp != "=") {
        ByteCodeBuffer incrBuf = join3(
            bufRoot,
            bufIndex,
            create0(OP_STACK_DUPLICATE_2, null, null));
        // [root, index, root, index] 
        incrBuf = join2(incrBuf, create0(OP_INDEX, bracketToken, null));
        // [root, index, originalValue]
        incrBuf = join3(incrBuf, bufVal, create0(OP_BIN_OP, assignIndex.assignOp, baseOp));
        // [root, index, finalValue]
        return join2(incrBuf, create1(OP_ASSIGN_INDEX, assignIndex.assignOp, null, 1));
    }

    return join4(
        bufVal,
        bufRoot,
        bufIndex,
        create0(OP_ASSIGN_INDEX, assignIndex.assignOp, null)
    );
}

ByteCodeBuffer serializeAssignField(StaticContext staticCtx, Statement assignField, string baseOp) {
    Expression df = assignField.assignTarget;
    string fieldName = df.strVal;
    ByteCodeBuffer bufVal = serializeExpression(staticCtx, assignField.assignValue);
    ByteCodeBuffer bufRoot = serializeExpression(staticCtx, df.root);
    if (baseOp != "=") {
        ByteCodeBuffer incrBuf = join2(
            bufRoot,
            create0(OP_STACK_DUPLICATE, null, null));
        // [root, root]
        incrBuf = join2(incrBuf, create0(OP_DOT_FIELD, df.opToken, fieldName));
        // [root, originalValue]
        incrBuf = join3(incrBuf, bufVal, create0(OP_BIN_OP, assignField.assignOp, baseOp));
        // [root, finalValue]
        return join2(
            incrBuf,
            create1(OP_ASSIGN_FIELD, assignField.assignOp, fieldName, 1));
    }

    return join3(
        bufVal,
        bufRoot,
        create0(OP_ASSIGN_FIELD, assignField.assignOp, fieldName)
    );
}

ByteCodeBuffer serializeBreak(Statement br) {
    return create0(OP_BREAK_DUMMY, br.firstToken, null);
}

ByteCodeBuffer serializeContinue(Statement cont) {
    return create0(OP_CONTINUE_DUMMY, cont.firstToken, null);
}

ByteCodeBuffer serializeDoWhileLoop(StaticContext staticCtx, Statement doWhileLoop) {
    ByteCodeBuffer body = serializeCodeBlock(staticCtx, doWhileLoop.code);
    ByteCodeBuffer condition = ByteCodeUtil_ensureBooleanExpression(doWhileLoop.condition.firstToken, serializeExpression(staticCtx, doWhileLoop.condition));
    return join4(
        finalizeBreakContinue(body, condition.length + 2, true, 0),
        condition,
        create1(OP_POP_AND_JUMP_IF_FALSE, null, null, 1),
        create1(OP_JUMP, null, null, -(1 + 1 + condition.length + body.length)));
}

ByteCodeBuffer serializeExpressionStatement(StaticContext staticCtx, Statement exprStmnt) {
    return join2(
        serializeExpression(staticCtx, exprStmnt.expression),
        create0(OP_POP, null, null)
    );
}

ByteCodeBuffer serializeForLoop(StaticContext staticCtx, Statement forLoop) {
    Expression condition = forLoop.condition;
    Array<Statement> code = forLoop.code;
    Array<Statement> init = forLoop.forInit;
    Array<Statement> step = forLoop.forStep;

    ByteCodeBuffer bufInit = serializeCodeBlock(staticCtx, init);
    ByteCodeBuffer bufStep = serializeCodeBlock(staticCtx, step);
    ByteCodeBuffer bufBody = serializeCodeBlock(staticCtx, code);
    ByteCodeBuffer bufCondition = serializeExpression(staticCtx, condition);

    bufCondition = ByteCodeUtil_ensureBooleanExpression(condition.firstToken, bufCondition);

    int stepSize = 0;
    int bodySize = 0;
    int conditionSize = bufCondition.length;
    if (bufStep != null) stepSize = bufStep.length;
    if (bufBody != null) bodySize = bufBody.length;

    return join6(
        bufInit,
        bufCondition,
        create1(OP_POP_AND_JUMP_IF_FALSE, null, null, bodySize + stepSize + 1),
        finalizeBreakContinue(bufBody, bufStep.length + 1, true, 0),
        bufStep,
        create1(OP_JUMP, null, null, -(1 + bodySize + stepSize + 1 + conditionSize)));
}

ByteCodeBuffer serializeForEachLoop(StaticContext staticCtx, Statement forEachLoop) {
    string loopExpr = "@fe" + Convert.intToString(forEachLoop.autoId);
    string iteratorVar = "@fi" + Convert.intToString(forEachLoop.autoId);

    ByteCodeBuffer setup = join5(
        serializeExpression(staticCtx, forEachLoop.expression),
        create0(OP_ENSURE_LIST, forEachLoop.expression.firstToken, null),
        create0(OP_ASSIGN_VAR, null, loopExpr),
        create1(OP_PUSH_INT, null, null, 0),
        create0(OP_ASSIGN_VAR, null, iteratorVar)
    );

    ByteCodeBuffer bufBody = serializeCodeBlock(staticCtx, forEachLoop.code);

    ByteCodeBuffer increment = join4(
        create0(OP_PUSH_VAR, null, iteratorVar),
        create1(OP_PUSH_INT, null, null, 1),
        create0(OP_BIN_OP, null, "+"),
        create0(OP_ASSIGN_VAR, null, iteratorVar)
    );

    ByteCodeBuffer doAssign = join4(
        create0(OP_PUSH_VAR, null, loopExpr),
        create0(OP_PUSH_VAR, null, iteratorVar),
        create0(OP_INDEX, null, null),
        create0(OP_ASSIGN_VAR, forEachLoop.varToken, forEachLoop.varToken.Value)
    );

    ByteCodeBuffer lengthCheck = join5(
        create0(OP_PUSH_VAR, null, iteratorVar),
        create0(OP_PUSH_VAR, null, loopExpr),
        create0(OP_DOT_FIELD, null, "length"),
        create0(OP_BIN_OP, null, ">="),
        create1(OP_POP_AND_JUMP_IF_TRUE, null, null, doAssign.length + bufBody.length + increment.length + 1)
    );

    bufBody = finalizeBreakContinue(bufBody, 5, true, 0);

    int reverseJumpDistance = -1 - increment.length - bufBody.length - doAssign.length - lengthCheck.length;

    ByteCodeBuffer fullCode = join6(
        setup,
        lengthCheck,
        doAssign,
        bufBody,
        increment,
        create1(OP_JUMP, null, null, reverseJumpDistance)
    );

    return fullCode;
}

ByteCodeBuffer serializeIfStatement(StaticContext staticCtx, Statement ifStmnt) {
    Expression condition = ifStmnt.condition;
    Array<Statement> ifCode = ifStmnt.code;
    Array<Statement> elseCode = ifStmnt.elseCode; // if not present, it's an empty array, not null

    ByteCodeBuffer buf = serializeExpression(staticCtx, condition);
    ByteCodeBuffer bufTrue = serializeCodeBlock(staticCtx, ifCode);
    ByteCodeBuffer bufFalse = serializeCodeBlock(staticCtx, elseCode);
    buf = ByteCodeUtil_ensureBooleanExpression(condition.firstToken, buf);

    int trueSize = 0;
    int falseSize = 0;
    if (bufTrue != null) trueSize = bufTrue.length;
    if (bufFalse != null) falseSize = bufFalse.length;

    if (trueSize + falseSize == 0) {
        return join2(buf, create0(OP_POP, null, null));
    }

    if (falseSize == 0) {
        return join3(
            buf,
            create1(OP_POP_AND_JUMP_IF_FALSE, null, null, trueSize),
            bufTrue);
    }

    if (trueSize == 0) {
        return join3(
            buf,
            create1(OP_POP_AND_JUMP_IF_TRUE, null, null, falseSize),
            bufFalse);
    }

    return join5(
        buf,
        create1(OP_POP_AND_JUMP_IF_FALSE, null, null, trueSize + 1),
        bufTrue,
        create1(OP_JUMP, null, null, falseSize),
        bufFalse);
}

ByteCodeBuffer serializeReturn(StaticContext staticCtx, Statement ret) {
    ByteCodeBuffer buf = null;
    if (ret.expression == null) {
        buf = create0(OP_PUSH_NULL, null, null);
    } else {
        buf = serializeExpression(staticCtx, ret.expression);
    }
    return join2(buf, create0(OP_RETURN, ret.firstToken, null));
}

ByteCodeBuffer serializeSwitchStatement(StaticContext staticCtx, Statement switchStmnt) {
    int i = 0;
    int j = 0;
    
    // switch (cond) { } <-- needs to ensure that the condition is an int or string.
    if (switchStmnt.switchChunks.size() == 0) {
        return join3(
            serializeExpression(staticCtx, switchStmnt.condition),
            create0(OP_ENSURE_INT_OR_STRING, switchStmnt.condition.firstToken, null),
            create0(OP_POP, null, null));
    }

    int conditionTypeEnsuranceOpCode = OP_ENSURE_INT_OR_STRING;
    Expression firstCaseExpr = switchStmnt.switchChunks[0].Cases[0];
    if (firstCaseExpr != null) {
        if (firstCaseExpr.type == ExpressionType.INTEGER_CONST) {
            conditionTypeEnsuranceOpCode = OP_ENSURE_INT;
        } else if (firstCaseExpr.type == ExpressionType.STRING_CONST) {
            conditionTypeEnsuranceOpCode = OP_ENSURE_STRING;
        } else {
            fail(""); // Invalid Operation
        }
    }

    ByteCodeBuffer condBuf = join2(
        serializeExpression(staticCtx, switchStmnt.condition),
        create0(conditionTypeEnsuranceOpCode, switchStmnt.condition.firstToken, null));

    ByteCodeBuffer caseBuf = null;
    int currentJumpOffset = 0;
    bool hasDefault = false;
    Dictionary<string, int> stringJumpOffset = new Dictionary<string, int>();
    Dictionary<int, int> intJumpOffset = new Dictionary<int, int>();
    int defaultJumpOffset = -1;
    for (i = 0; i < switchStmnt.switchChunks.size(); i += 1) {
        SwitchChunk chunk = switchStmnt.switchChunks[i];
        for (j = 0; j < chunk.Cases.size(); j += 1) {
            Expression expr = chunk.Cases[j];
            if (expr == null) {
                defaultJumpOffset = currentJumpOffset;
                hasDefault = true;
            } else if (conditionTypeEnsuranceOpCode == OP_ENSURE_INT) {
                intJumpOffset[expr.intVal] = currentJumpOffset;
            } else if (conditionTypeEnsuranceOpCode == OP_ENSURE_STRING) {
                stringJumpOffset[expr.strVal] = currentJumpOffset;
            } else {
                fail(""); // Invalid operation
            }
        }

        ByteCodeBuffer chunkBuf = serializeCodeBlock(staticCtx, chunk.Code.toArray());
        currentJumpOffset += chunkBuf.length;
        caseBuf = join2(caseBuf, chunkBuf);
    }

    if (!hasDefault) defaultJumpOffset = currentJumpOffset; // bypass all if no default provided

    caseBuf = finalizeBreakContinue(caseBuf, 0, false, 0);

    ByteCodeBuffer jumpBuf = null;

    /*
        OP_SWITCH_BUILD count defaultJumpOffset type (1 = int, 2 = string)
        
        OP_SWITCH_ADD offset [str value]
        ... repeated
            OR 
        OP_SWITCH_ADD -1 offset1, value1, offset2, value2, etc...
        OP_SWITCH_FINALIZE (no args)

        This will:
        - initialize a native dictionary of the correct type
        - add items to that dictionary for the given offset
        - finalize by jumping BACK to the OP_SWITCH_BUILD row and swapping it out with a OP_SWITCH_INT or OP_SWITCH_STR instruction.
        - gives the created dictionary an ID# and adds it to a lookup array on the execution context.

        All offsets are the jump offset from the final OP_SWITCH_INT so no adjusting needs to occur at runtime.

        OP_SWITCH_INT/STR id
        The lookup table is located on the execution context
    */

    if (conditionTypeEnsuranceOpCode == OP_ENSURE_INT) {
        List<int> jumpArgs = new List<int>();
        jumpArgs.add(-1);
        Array<int> intKeys = Sorting.getIntegerSortedCopy(intJumpOffset.keys());
        for (i = 0; i < intKeys.size(); i += 1) {
            int k = intKeys[i];
            jumpArgs.add(intJumpOffset[k] + 2);
            jumpArgs.add(k);
        }

        ByteCodeBuffer lookup = create0(OP_SWITCH_ADD, null, null);
        lookup.row.args = jumpArgs.toArray();

        jumpBuf = join3(
            create2(OP_SWITCH_BUILD, null, null, defaultJumpOffset + 2, 1),
            lookup,
            create1(OP_SWITCH_FINALIZE, null, null, 2)
        );

    } else if (conditionTypeEnsuranceOpCode == OP_ENSURE_STRING) {
        Array<string> keys = Sorting.getLexicalSortedCopy(stringJumpOffset.keys());
        jumpBuf = create2(OP_SWITCH_BUILD, null, null, defaultJumpOffset + keys.size() + 1, 2);
        for (i = 0; i < keys.size(); i += 1) {
            string key = keys[i];
            jumpBuf = join2(
                jumpBuf,
                create1(OP_SWITCH_ADD, null, key, stringJumpOffset[key] + keys.size() + 1));
        }

        jumpBuf = join2(
            jumpBuf,
            create1(OP_SWITCH_FINALIZE, null, null, jumpBuf.length));
    } else {
        jumpBuf = create0(OP_POP, null, null);
    }

    return join3(condBuf, jumpBuf, caseBuf);
}

// All breaks and continues default to jumping to the end of the buffer in
// its current state. The additional break and continue offset are the
// distance from the end.
// For example, if this is a loop and the last instruction is a reverse JUMP,
// then the break offset will be 0 and the continue offset will be -1.
ByteCodeBuffer finalizeBreakContinue(ByteCodeBuffer originalBuffer, int additionalBreakOffset, bool allowContinue, int additionalContinueOffset) {
    int i = 0;
    Array<ByteCodeRow> rows = flatten(originalBuffer);
    for (i = 0; i < rows.size(); i += 1) {
        int op = rows[i].opCode;
        if (op == OP_BREAK_DUMMY || op == OP_CONTINUE_DUMMY) {
            int additionalOffset = additionalBreakOffset;
            if (op == OP_CONTINUE_DUMMY) {
                // this should have been caught before now. 
                if (!allowContinue) fail(""); 
                
                additionalOffset = additionalContinueOffset;
            }
            rows[i].opCode = OP_JUMP;
            int offsetToEnd = rows.size() - i - 1 + additionalOffset;
            rows[i].args = new Array<int>(1);
            rows[i].args[0] = offsetToEnd;
        }
    }

    ByteCodeBuffer output = null;
    for (i = 0; i < rows.size(); i += 1) {
        output = join2(output, ByteCodeBuffer_fromRow(rows[i]));
    }

    return output;
}

ByteCodeBuffer serializeThrowStatement(StaticContext staticCtx, Statement thrw) {
    return join2(
        serializeExpression(staticCtx, thrw.expression),
        create0(OP_THROW, thrw.firstToken, null));
}

ByteCodeBuffer serializeTryStatement(StaticContext staticCtx, Statement tryStmnt) {
    int i = 0;
    
    ByteCodeBuffer tryBuf = serializeCodeBlock(staticCtx, tryStmnt.code);
    List<ByteCodeBuffer> catchBufs = new List<ByteCodeBuffer>();
    for (i = 0; i < tryStmnt.catchChunks.size(); i += 1) {
        CatchChunk cc = tryStmnt.catchChunks[i];
        ByteCodeBuffer catchBuf = serializeCodeBlock(staticCtx, cc.Code);

        // the value stack is cleared to its base level and the exception is added as the only item.
        if (cc.exceptionVarName == null) {
            catchBuf = join2(
                create0(OP_POP, null, null),
                catchBuf);
        } else {
            catchBuf = join2(
                create0(OP_ASSIGN_VAR, cc.exceptionVarName, cc.exceptionVarName.Value),
                catchBuf);
        }
        
        catchBufs.add(catchBuf);
    }

    ByteCodeBuffer finallyBuf = join2(
        serializeCodeBlock(staticCtx, tryStmnt.finallyCode),
        create0(OP_TRY_FINALLY_END, null, null));

    // Add the jumps at the end of each catch to the finally
    int jumpOffset = 0;
    for (i = catchBufs.size() - 2; i >= 0; i -= 1) {
        jumpOffset += catchBufs[i + 1].length;
        catchBufs[i] = join2(
            catchBufs[i],
            create1(OP_JUMP, null, null, jumpOffset)); // jump to finally
    }

    // Add a router chunk for each class type
    // If none are found, it will flag the exception as bubbling and go to the finally.
    /*
        Try
        Route exceptions
        Catch 1:
        Catch 2:
        Catch n:
        Finally (always present as stub, the OP_TRY_FINALLY_END needs to run to re-bubble)
    */
    // ByteCodeBuffer exceptionRouterBuf = ByteCode.create0

    // OP_TRY_CATCH_ROUTER [finallyJumpOffset jumpOffset1 classId1 classId2 ...[0 jumpOffset2 classId3] ] <-- 0's delimit multiple catches
    // If a jump offset has no class associated with it, then that's the general Exception catcher
    jumpOffset = 0;
    List<int> catchRouterArgs = new List<int>();
    for (i = 0; i < catchBufs.size(); i += 1) {
        if (i > 0) catchRouterArgs.add(0);
        catchRouterArgs.add(jumpOffset);
        CatchChunk cc = tryStmnt.catchChunks[i];
        for (int j = 0; j < cc.ClassDefinitions.size(); j += 1) {
            ClassEntity cdef = cc.ClassDefinitions[j];
            catchRouterArgs.add(cdef.baseData.serializationIndex);
        }

        jumpOffset += catchBufs[i].length;
    }
    // TODO: theoretically, you can leave off the finally jump offset and read it from the previous instruction
    // which will probably be the OP_JUMP for the finally.
    catchRouterArgs.insert(0, jumpOffset); // jump to finally

    ByteCodeBuffer catchRouterBuf = ByteCodeBuffer_fromRow(ByteCodeRow_new(OP_TRY_CATCH_ROUTER, null, null, catchRouterArgs.toArray()));

    ByteCodeBuffer routeAndCatches = catchRouterBuf;
    for (i = 0; i < catchBufs.size(); i += 1) {
        ByteCodeBuffer catchBuf = catchBufs[i];
        routeAndCatches = join2(routeAndCatches, catchBuf);
    }
    
    // jump to finally
    tryBuf = join2(
        tryBuf, 
        create1(OP_JUMP, null, null, routeAndCatches.length)); 

    Array<int> tryCatchInfo = new Array<int>(4);
    tryCatchInfo[0] = 0; // offset to where the try starts.
    tryCatchInfo[1] = tryBuf.length;
    tryCatchInfo[2] = routeAndCatches.length;
    tryCatchInfo[3] = finallyBuf.length;
    tryBuf.first.tryCatchInfo = tryCatchInfo;

    return join3(tryBuf, routeAndCatches, finallyBuf);
}

ByteCodeBuffer serializeWhileLoop(StaticContext staticCtx, Statement whileLoop) {
    ByteCodeBuffer condBuf = serializeExpression(staticCtx, whileLoop.condition);
    condBuf = ByteCodeUtil_ensureBooleanExpression(whileLoop.condition.firstToken, condBuf);
    ByteCodeBuffer loopBody = serializeCodeBlock(staticCtx, whileLoop.code);
    return join4(
        condBuf,
        create1(OP_POP_AND_JUMP_IF_FALSE, null, null, loopBody.length + 1),
        finalizeBreakContinue(loopBody, 1, true, -loopBody.length - 1 - condBuf.length), // could just leave the continue offset as 0 but this skips an unnecessary extra jump
        create1(OP_JUMP, null, null, -(loopBody.length + condBuf.length + 1 + 1))
    );
}
