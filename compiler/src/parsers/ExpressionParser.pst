// ternary -> null coalesce -> boolean combine -> bitwise ->
// equality -> inequality -> bitshift ->
// addition -> multiplication ->
// unary prefix (!, -, ~, --, ++) ->
// unary suffix (-- ++ invoke, brackets, dots) ->
// atomic

Expression ParseExpression(TokenStream tokens) {
    return ParseTernary(tokens);
}

Expression ParseAddition(TokenStream tokens) {
    Expression root = ParseMultiplication(tokens);
    if (Tokens_doesNextInclulde2(tokens, "+", "-")) {
        List<Expression> expressions = new List<Expression>();
        expressions.add(root);
        List<Token> ops = new List<Token>();
        while (Tokens_doesNextInclulde2(tokens, "+", "-")) {
            ops.add(Tokens_pop(tokens));
            expressions.add(ParseMultiplication(tokens));
        }
        root = FlattenBinaryOpChain(expressions, ops);
    }
    return root;
}

Expression ParseAtomicExpression(TokenStream tokens) {
    Token nextToken = Tokens_peek(tokens);
    if (nextToken == null) Tokens_ensureMore(tokens);
    string next = nextToken.Value;
    switch (nextToken.Type) {
        case TokenType.PUNCTUATION:

            if (next == OPEN_PAREN) {
                // () =>
                if (Tokens_isSequenceNext3(tokens, OPEN_PAREN, CLOSE_PAREN, "=>")) {
                    return ParseLambda(tokens);
                }

                // (a, ...) =>
                if (Tokens_isSequenceNext3(tokens, OPEN_PAREN, null, ",") &&
                    Tokens_peekAhead(tokens, 1).Type == TokenType.NAME) {
                    return ParseLambda(tokens);
                }

                // (a = ...) =>
                if (Tokens_isSequenceNext3(tokens, OPEN_PAREN, null, "=") &&
                    Tokens_peekAhead(tokens, 1).Type == TokenType.NAME) {

                    return ParseLambda(tokens);
                }

                // (a) =>
                if (Tokens_isSequenceNext4(tokens, OPEN_PAREN, null, CLOSE_PAREN, "=>")) {
                    return ParseLambda(tokens);
                }

                Tokens_pop(tokens);
                Expression expr = ParseExpression(tokens);
                Tokens_popExpected(tokens, CLOSE_PAREN);
                return expr;
            }

            if (next == OPEN_SQUARE_BRACKET) return ParseListDefinition(tokens);
            if (next == OPEN_CURLY_BRACE) return ParseDictionaryDefinition(tokens);
            if (next == "$") {
                Token builtinPrefix = Tokens_pop(tokens);
                Token builtinName = Tokens_popName(tokens, "built-in function name");
                return Expression_createExtensionReference(builtinPrefix, builtinName.Value);
            }
            break;

        case TokenType.KEYWORD:
            if (next == "true" || next == "false") {
                Token boolTok = Tokens_pop(tokens);
                return Expression_createBoolConstant(boolTok, next == "true");
            }

            if (next == "null") {
                return Expression_createNullConstant(Tokens_pop(tokens));
            }

            if (next == "new") {
                Token newTok = Tokens_pop(tokens);
                List<Token> nameChain = new List<Token>();
                nameChain.add(Tokens_popName(tokens, "class name"));

                while (Tokens_isNext(tokens, ".")) {
                    nameChain.add(Tokens_pop(tokens));
                    nameChain.add(Tokens_popName(tokens, "class name"));
                }
                Expression ctorChain = Expression_createVariable(nameChain[0], nameChain[0].Value);
                for (int i = 1; i < nameChain.size(); i += 2) {
                    ctorChain = Expression_createDotField(ctorChain, nameChain[i], nameChain[i + 1].Value);
                }
                return Expression_createConstructorReference(newTok, ctorChain);
            }

            if (next == "this") {
                return Expression_createThisReference(Tokens_pop(tokens));
            }

            if (next == "base") {
                return Expression_createBaseReference(Tokens_pop(tokens));
            }

            break;

        case TokenType.INTEGER:
            int intVal = TryParseInteger(nextToken, next, false);
            return Expression_createIntegerConstant(Tokens_pop(tokens), intVal);

        case TokenType.FLOAT:
            double floatVal = TryParseFloat(nextToken, next);
            return Expression_createFloatConstant(Tokens_pop(tokens), floatVal);

        case TokenType.HEX_INTEGER:
            int intValHex = TryParseInteger(nextToken, next, true);
            return Expression_createIntegerConstant(Tokens_pop(tokens), intValHex);

        case TokenType.STRING:
            string strVal = TryParseString(nextToken, next);
            return Expression_createStringConstant(Tokens_pop(tokens), strVal);

        case TokenType.NAME:
            if (Tokens_isSequenceNext2(tokens, null, "=>")) return ParseLambda(tokens);

            Token varName = Tokens_popName(tokens, "variable name");
            return Expression_createVariable(varName, varName.Value);
    }

    Errors_Throw(nextToken, "Expected an expression but found '" + next + "' instead.");
    return null;
}

Expression FlattenBinaryOpChain(List<Expression> expressions, List<Token> ops) {
    int i = 0;
    string opType = ops[0].Value;
    bool isShortCircuit = opType == "??" || opType == "&&" || opType == "||";
    Expression acc = null;
    int length = expressions.size();
    if (isShortCircuit) {
        acc = Expression_createBinaryOp(expressions[length - 2], ops[length - 2], expressions[length - 1]);
        for (i = length - 3; i >= 0; i -= 1) {
            acc = Expression_createBinaryOp(expressions[i], ops[i], acc);
        }
    } else {
        acc = Expression_createBinaryOp(expressions[0], ops[0], expressions[1]);

        for (i = 2; i < length; i += 1) {
            acc = Expression_createBinaryOp(acc, ops[i - 1], expressions[i]);
        }
    }

    return acc;
}

Expression ParseBitshift(TokenStream tokens) {
    Expression root = ParseAddition(tokens);
    if (Tokens_doesNextInclulde3(tokens, "<<", ">>", ">>>")) {
        List<Expression> expressions = new List<Expression>();
        expressions.add(root);
        List<Token> ops = new List<Token>();
        while (Tokens_doesNextInclulde3(tokens, "<<", ">>", ">>>")) {
            ops.add(Tokens_pop(tokens));
            expressions.add(ParseAddition(tokens));
        }
        root = FlattenBinaryOpChain(expressions, ops);
    }

    return root;
}

Expression ParseBitwise(TokenStream tokens) {
    Expression root = ParseEquality(tokens);
    if (Tokens_doesNextInclulde3(tokens, "&", "|", "^")) {
        List<Expression> expressions = new List<Expression>();
        expressions.add(root);
        List<Token> ops = new List<Token>();

        while (Tokens_doesNextInclulde3(tokens, "&", "|", "^")) {
            ops.add(Tokens_pop(tokens));
            expressions.add(ParseEquality(tokens));
        }
        return FlattenBinaryOpChain(expressions, ops);
    }
    return root;
}

Expression ParseBooleanCombination(TokenStream tokens) {
    Expression root = ParseBitwise(tokens);
    if (Tokens_doesNextInclulde2(tokens, "||", "&&")) {
        List<Expression> expressions = new List<Expression>();
        expressions.add(root);
        List<Token> ops = new List<Token>();
        while (Tokens_doesNextInclulde2(tokens, "||", "&&")) {
            ops.add(Tokens_pop(tokens));
            expressions.add(ParseBitwise(tokens));
        }
        return FlattenBinaryOpChain(expressions, ops);
    }
    return root;
}

Expression ParseDictionaryDefinition(TokenStream tokens) {
    Token openDictionaryToken = Tokens_popExpected(tokens, OPEN_CURLY_BRACE);
    List<Expression> keys = new List<Expression>();
    List<Expression> values = new List<Expression>();
    bool nextAllowed = true;
    while (nextAllowed && !Tokens_isNext(tokens, CLOSE_CURLY_BRACE)) {
        keys.add(ParseExpression(tokens));
        Tokens_popExpected(tokens, ":");
        values.add(ParseExpression(tokens));
        nextAllowed = Tokens_popIfPresent(tokens, ",");
    }
    Tokens_popExpected(tokens, CLOSE_CURLY_BRACE);
    return Expression_createDictionaryDefinition(openDictionaryToken, keys.toArray(), values.toArray());
}

Expression ParseEquality(TokenStream tokens) {
    Expression root = ParseInequality(tokens);
    if (Tokens_doesNextInclulde2(tokens, "==", "!=")) {
        Token op = Tokens_pop(tokens);
        Expression right = ParseInequality(tokens);
        return Expression_createBinaryOp(root, op, right);
    }
    return root;
}

Expression ParseExponent(TokenStream tokens) {
    Expression root = ParseUnaryPrefix(tokens);
    if (Tokens_isNext(tokens, "**")) {
        List<Expression> expressions = new List<Expression>();
        expressions.add(root);
        List<Token> ops = new List<Token>();
        while (Tokens_isNext(tokens, "**")) {
            ops.add(Tokens_pop(tokens));
            expressions.add(ParseUnaryPrefix(tokens));
        }
        root = FlattenBinaryOpChain(expressions, ops);
    }
    return root;
}

Expression ParseInequality(TokenStream tokens) {
    Expression root = ParseBitshift(tokens);
    if (Tokens_doesNextInclude5(tokens, "<", ">", "<=", ">=", "is")) {
        Token op = Tokens_pop(tokens);
        Expression right = ParseBitshift(tokens);
        root = Expression_createBinaryOp(root, op, right);
    }
    return root;
}

Expression ParseInlineIncrementPrefix(TokenStream tokens) {
    if (!Tokens_doesNextInclulde2(tokens, "++", "--")) {
        // more of an assert
        Tokens_popExpected(tokens, "++");
    }
    Token op = Tokens_pop(tokens);
    Expression root = ParseUnarySuffix(tokens);
    return Expression_createInlineIncrement(op, root, op, true);
}

Expression ParseListDefinition(TokenStream tokens) {
    Token openListToken = Tokens_popExpected(tokens, OPEN_SQUARE_BRACKET);
    List<Expression> items = new List<Expression>();
    bool nextAllowed = true;
    while (nextAllowed && !Tokens_isNext(tokens, CLOSE_SQUARE_BRACKET)) {
        items.add(ParseExpression(tokens));
        nextAllowed = Tokens_popIfPresent(tokens, ",");
    }
    Tokens_popExpected(tokens, CLOSE_SQUARE_BRACKET);
    return Expression_createListDefinition(openListToken, items.toArray());
}

Expression ParseLambda(TokenStream tokens) {
    Token firstToken = Tokens_peek(tokens);
    List<Token> argTokens = new List<Token>();
    List<Expression> argDefaultValues = new List<Expression>();
    if (Tokens_popIfPresent(tokens, OPEN_PAREN)) {
        while (!Tokens_popIfPresent(tokens, CLOSE_PAREN)) {
            if (argTokens.size() > 0) Tokens_popExpected(tokens, ",");
            argTokens.add(Tokens_popName(tokens, "argument name"));
            Expression defaultVal = null;
            if (Tokens_popIfPresent(tokens, "=")) {
                defaultVal = ParseExpression(tokens);
            }
            argDefaultValues.add(defaultVal);
        }
    } else {
        argTokens.add(Tokens_popName(tokens, "argument name"));
        argDefaultValues.add(null);
    }

    Token arrow = Tokens_popExpected(tokens, "=>");

    Array<Statement> code = null;
    if (Tokens_isNext(tokens, OPEN_CURLY_BRACE)) {
        code = ParseCodeBlock(tokens, true);
    } else {
        Expression codeExpr = ParseExpression(tokens);
        code = new Array<Statement>(1);
        code[0] = Statement_createReturn(arrow, codeExpr);
    }
    return Expression_createLambda(firstToken, argTokens.toArray(), argDefaultValues.toArray(), arrow, code);
}

Expression ParseMultiplication(TokenStream tokens) {
    Expression root = ParseExponent(tokens);
    if (Tokens_doesNextInclulde3(tokens, "*", "/", "%")) {
        List<Expression> expressions = new List<Expression>();
        expressions.add(root);
        List<Token> ops = new List<Token>();
        while (Tokens_doesNextInclulde3(tokens, "*", "/", "%")) {
            ops.add(Tokens_pop(tokens));
            expressions.add(ParseExponent(tokens));
        }
        root = FlattenBinaryOpChain(expressions, ops);
    }
    return root;
}

Expression ParseNegatePrefix(TokenStream tokens) {
    if (!Tokens_doesNextInclulde3(tokens, "-", "!", "~")) {
        Tokens_popExpected(tokens, "-"); // assert
    }

    Token op = Tokens_pop(tokens);
    Expression root = ParseUnaryPrefix(tokens);
    return Expression_createNegatePrefix(op, root);
}

Expression ParseNullCoalesce(TokenStream tokens) {
    Expression root = ParseBooleanCombination(tokens);
    if (Tokens_isNext(tokens, "??")) {
        Token op = Tokens_pop(tokens);
        Expression next = ParseNullCoalesce(tokens);
        root = Expression_createBinaryOp(root, op, next);
    }
    return root;
}

Expression ParseTernary(TokenStream tokens) {
    Expression root = ParseNullCoalesce(tokens);
    if (Tokens_isNext(tokens, "?")) {
        Token qmark = Tokens_pop(tokens);
        Expression trueValue = ParseTernary(tokens);
        Tokens_popExpected(tokens, ":");
        Expression falseValue = ParseTernary(tokens);
        root = Expression_createTernary(root, qmark, trueValue, falseValue);
    }
    return root;
}

Expression ParseTypeofPrefix(TokenStream tokens) {
    Token typeofToken = Tokens_popKeyword(tokens, "typeof");
    Expression root = ParseUnaryPrefix(tokens);
    return Expression_createTypeof(typeofToken, root);
}

Expression ParseUnaryPrefix(TokenStream tokens) {
    string next = Tokens_peekValue(tokens);
    if (next == null) Tokens_ensureMore(tokens);
    switch (next[0]) {
        case '-':
            if (next == "--") return ParseInlineIncrementPrefix(tokens);
            if (next == "-") return ParseNegatePrefix(tokens);
            break;
        case '+':
            if (next == "++") return ParseInlineIncrementPrefix(tokens);
            break;
        case '!':
            if (next == "!") return ParseNegatePrefix(tokens);
            break;
        case '~':
            if (next == "~") return ParseNegatePrefix(tokens);
            break;
        case 't':
            if (next == "typeof") return ParseTypeofPrefix(tokens);
            break;
    }

    return ParseUnarySuffix(tokens);
}

Expression ParseUnarySuffix(TokenStream tokens) {
    Expression root = ParseAtomicExpression(tokens);
    string next = Tokens_peekValue(tokens);
    bool checkForSuffixes = true;
    while (checkForSuffixes && next != null) {
        checkForSuffixes = false;
        if (next == ".") {
            Token dotToken = Tokens_pop(tokens);
            Token nameToken = Tokens_popName(tokens, "field name");
            root = Expression_createDotField(root, dotToken, nameToken.Value);
            checkForSuffixes = true;
        } else if (next == OPEN_PAREN) {
            Token openParen = Tokens_pop(tokens);
            List<Expression> args = new List<Expression>();
            while (!Tokens_popIfPresent(tokens, CLOSE_PAREN)) {
                if (args.size() > 0) Tokens_popExpected(tokens, ",");
                args.add(ParseExpression(tokens));
            }
            root = Expression_createFunctionInvocation(root, openParen, args.toArray());
            checkForSuffixes = true;
        } else if (next == OPEN_SQUARE_BRACKET) {

            Token openBracket = Tokens_pop(tokens);
            Tokens_ensureMore(tokens);
            Token throwTokenOnInvalidSlice = Tokens_peek(tokens);
            List<Expression> sliceNums = new List<Expression>();
            bool nextExpected = true;

            while (nextExpected && Tokens_hasMore(tokens)) {
                if (Tokens_popIfPresent(tokens, ":")) {
                    sliceNums.add(null);
                } else if (Tokens_isNext(tokens, CLOSE_SQUARE_BRACKET)) {
                    sliceNums.add(null);
                    nextExpected = false;
                } else {
                    sliceNums.add(ParseExpression(tokens));
                    if (!Tokens_popIfPresent(tokens, ":")) {
                        nextExpected = false;
                    }
                }
            }

            Tokens_popExpected(tokens, CLOSE_SQUARE_BRACKET);

            if (sliceNums.size() < 0 || sliceNums.size() > 3) {
                Errors_Throw(throwTokenOnInvalidSlice, "Invalid index or slice expression");
            }

            if (sliceNums.size() == 1) {
                if (sliceNums[0] == null) {
                    Errors_Throw(throwTokenOnInvalidSlice, "Expected index expression.");
                }

                root = Expression_createBracketIndex(root, openBracket, sliceNums[0]);
            } else {
                Expression thirdSliceNum = null;
                if (sliceNums.size() == 3) thirdSliceNum = sliceNums[2];
                root = Expression_createSliceExpression(root, openBracket, sliceNums[0], sliceNums[1], thirdSliceNum);
            }

            checkForSuffixes = true;
        } else if (next == "++" || next == "--") {
            Token ppToken = Tokens_pop(tokens);
            root = Expression_createInlineIncrement(root.firstToken, root, ppToken, false);
        }

        next = Tokens_peekValue(tokens);
    }

    return root;
}

int TryParseInteger(Token throwToken, string rawValue, bool isHex) {
    // TODO: this should actually be a long or big int to preserve accuracy end-to-end.
    int output = 0;
    int start = 0;
    int baseMultiplier = 10;
    Array<int> chars = rawValue.toLower().toUtf8Bytes();

    if (isHex) {
        start = 2; // skip the "0x" prefix which has already been verified before calling this function.
        baseMultiplier = 16;
    }

    for (int i = start; i < chars.size(); i++) {
        int d = chars[i];
        int digitVal = 0;
        if (d >= Convert.charToCharCode('0') && d <= Convert.charToCharCode('9')) {
            digitVal = d - Convert.charToCharCode('0');
        } else if (isHex && d >= Convert.charToCharCode('a') && d <= Convert.charToCharCode('f')) {
            digitVal = d - Convert.charToCharCode('a') + 10;
        } else {
            if (isHex) Errors_Throw(throwToken, "Invalid hexadecimal constant.");
            Errors_Throw(throwToken, "Invalid integer constant");
        }

        output = output * baseMultiplier + digitVal;
    }

    return output;
}

double TryParseFloat(Token throwToken, string rawValue) {
    Array<double> o = new Array<double>(2);
    Convert.tryParseFloat(rawValue, o);
    if (o[0] > 0) return o[1];
    Errors_Throw(throwToken, "Invalid float constant");
    return 0.0;
}

string TryParseString(Token throwToken, string rawValue) {
    List<string> output = new List<string>();

    int length = rawValue.size() - 1;
    string c = "";
    for (int i = 1; i < length; i += 1) {
        c = rawValue.subString(i, 1);
        if (c == "\\") {
            i += 1;

            // More of an assert. The tokenizer should outright prevent this from happening ever.
            if (i == length) Errors_Throw(throwToken, "Invalid backslash in string constant.");

            c = rawValue.subString(i, 1);
            if (c == "n") c = "\n";
            else if (c == "r") c = "\r";
            else if (c == "'" || c == "\"" || c == "\\") { }
            else if (c == "t") c = "\t";
            else {
                Errors_Throw(throwToken, "Unrecognized string escape sequence: '\\" + c + "'");
            }
        }
        output.add(c);
    }

    return output.join("");
}
