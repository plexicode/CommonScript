
Token TryPopAssignmentOp(TokenStream tokens) {
    string op = Tokens_peekValue(tokens);
    if (op == null) return null;
    bool isOp = false;
    switch (op[0]) {
        case '=':
            if (op == "=") isOp = true;
            break;
        case '+':
            if (op == "+=") isOp = true;
            break;
        case '-':
            if (op == "-=") isOp = true;
            break;
        case '*':
            if (op == "*=") isOp = true;
            if (op == "**=") isOp = true;
            break;
        case '/':
            if (op == "/=") isOp = true;
            break;
        case '%':
            if (op == "%=") isOp = true;
            break;
        case '<':
            if (op == "<<=") isOp = true;
            break;
        case '>':
            if (op == ">>=") isOp = true;
            if (op == ">>>=") isOp = true;
            break;
        case '&':
            if (op == "&=") isOp = true;
            break;
        case '|':
            if (op == "|=") isOp = true;
            break;
        case '^':
            if (op == "^=") isOp = true;
            break;
    }

    if (isOp) return Tokens_pop(tokens);
    return null;
}


enum StatementKeyword {
    UNKNOWN = 0,
    BREAK = 1,
    CONTINUE = 2,
    DO = 3,
    FOR = 4,
    IF = 5,
    RETURN = 6,
    SWITCH = 7,
    THROW = 8,
    TRY = 9,
    WHILE = 10,
    YIELD = 11,
}

int StatementParser_IdentifyKeywordType(string kw) {
    switch (kw[0]) {
        case 'b':
            if (kw == "break") return StatementKeyword.BREAK;
            break;
        case 'c':
            if (kw == "continue") return StatementKeyword.CONTINUE;
            break;
        case 'd':
            if (kw == "do") return StatementKeyword.DO;
            break;
        case 'f':
            if (kw == "for") return StatementKeyword.FOR;
            break;
        case 'i':
            if (kw == "if") return StatementKeyword.IF;
            break;
        case 'r':
            if (kw == "return") return StatementKeyword.RETURN;
            break;
        case 's':
            if (kw == "switch") return StatementKeyword.SWITCH;
            break;
        case 't':
            if (kw == "throw") return StatementKeyword.THROW;
            if (kw == "try") return StatementKeyword.TRY;
            break;
        case 'w':
            if (kw == "while") return StatementKeyword.WHILE;
            break;
        case 'y':
            if (kw == "yield") return StatementKeyword.YIELD;
            break;
    }
    return StatementKeyword.UNKNOWN;
}

Statement ParseAnyForLoop(TokenStream tokens) {
    // assert that this isn't used on a non-for loop
    if (!Tokens_isNext(tokens, "for")) Tokens_popKeyword(tokens, "for");

    Token openParen = Tokens_peekAhead(tokens, 1);
    Token varName = Tokens_peekAhead(tokens, 2);
    Token colon = Tokens_peekAhead(tokens, 3);

    if (colon != null &&
        openParen.Value == OPEN_PAREN &&
        varName.Type == TokenType.NAME &&
        colon.Value == ":") {

        return ParseForEachLoop(tokens);
    }

    return ParseTraditionalForLoop(tokens);
}

Statement ParseBreakContinue(TokenStream tokens) {
    string expectedNextToken = "break";
    if (Tokens_isNext(tokens, "continue")) expectedNextToken = "continue";
    Token token = Tokens_popKeyword(tokens, expectedNextToken);
    Tokens_popExpected(tokens, ";");
    return Statement_createBreakContinue(token);
}

Statement ParseDoWhileLoop(TokenStream tokens) {
    Token doToken = Tokens_popKeyword(tokens, "do");
    Array<Statement> code = tokens.parseCodeBlock(tokens, false);
    Token whileToken = Tokens_popKeyword(tokens, "while");
    Tokens_popExpected(tokens, OPEN_PAREN);
    Expression condition = ParseExpression(tokens);
    Tokens_popExpected(tokens, CLOSE_PAREN);
    Tokens_popExpected(tokens, ";");

    return Statement_createDoWhile(doToken, code, whileToken, condition);
}

Statement ParseForEachLoop(TokenStream tokens) {
    Token forToken = Tokens_popKeyword(tokens, "for");
    Tokens_popExpected(tokens, OPEN_PAREN);
    Token varToken = Tokens_popName(tokens, "for loop iteration variable name");
    Tokens_popExpected(tokens, ":");
    Expression listExpr = ParseExpression(tokens);
    Tokens_popExpected(tokens, CLOSE_PAREN);
    Array<Statement> code = tokens.parseCodeBlock(tokens, false);
    return Statement_createForEachLoop(forToken, varToken, listExpr, code);
}

Statement ParseIfStatement(TokenStream tokens) {
    Token ifToken = Tokens_popKeyword(tokens, "if");
    Tokens_popExpected(tokens, OPEN_PAREN);
    Expression condition = ParseExpression(tokens);
    Tokens_popExpected(tokens, CLOSE_PAREN);
    Array<Statement> ifCode = tokens.parseCodeBlock(tokens, false);
    Array<Statement> elseCode = null;
    if (Tokens_popIfPresent(tokens, "else")) {
        elseCode = tokens.parseCodeBlock(tokens, false);
    } else {
        elseCode = new Array<Statement>(0);
    }

    return Statement_createIfStatement(ifToken, condition, ifCode, elseCode);
}

Statement ParseReturn(TokenStream tokens) {
    Token retToken = Tokens_popKeyword(tokens, "return");
    Expression expr = null;
    if (!Tokens_isNext(tokens, ";")) {
        expr = ParseExpression(tokens);
    } else {
        expr = Expression_createNullConstant(null);
    }
    Tokens_popExpected(tokens, ";");
    return Statement_createReturn(retToken, expr);
}

Statement ParseSwitch(TokenStream tokens) {
    Token switchToken = Tokens_popKeyword(tokens, "switch");
    Tokens_popExpected(tokens, OPEN_PAREN);
    Expression condition = ParseExpression(tokens);
    Tokens_popExpected(tokens, CLOSE_PAREN);
    List<SwitchChunk> chunks = new List<SwitchChunk>();
    Tokens_popExpected(tokens, OPEN_CURLY_BRACE);
    bool defaultEncountered = false;
    while (!Tokens_popIfPresent(tokens, CLOSE_CURLY_BRACE))
    {
        Tokens_ensureMore(tokens);
        SwitchChunk activeChunk = SwitchChunk_new();
        chunks.Add(activeChunk);
        while (Tokens_isNext(tokens, "case") || Tokens_isNext(tokens, "default")) {
            if (defaultEncountered) {
                Errors_Throw(Tokens_peek(tokens), "The default case for a switch statement must appear at the end.");
            }

            if (Tokens_isNext(tokens, "case")) {
                Token caseToken = Tokens_popKeyword(tokens, "case");
                Expression caseValue = ParseExpression(tokens);
                activeChunk.CaseTokens.Add(caseToken);
                activeChunk.Cases.Add(caseValue);
            } else {
                Token defaultToken = Tokens_popKeyword(tokens, "default");
                activeChunk.CaseTokens.Add(defaultToken);
                activeChunk.Cases.Add(null);
                defaultEncountered = true;
            }
            Tokens_popExpected(tokens, ":");
        }

        while (!Tokens_isNext(tokens, "case") &&
            !Tokens_isNext(tokens, "default") &&
            !Tokens_isNext(tokens, CLOSE_CURLY_BRACE) &&
            Tokens_hasMore(tokens))
        {
            activeChunk.Code.Add(tokens.parseStatement(tokens, false));
        }
    }

    return Statement_createSwitchStatement(switchToken, condition, Core.ListToArray(chunks));
}

Statement ParseThrow(TokenStream tokens) {
    Token throwToken = Tokens_popKeyword(tokens, "throw");
    Expression value = ParseExpression(tokens);
    Tokens_popExpected(tokens, ";");
    return Statement_createThrow(throwToken, value);
}

Statement ParseTraditionalForLoop(TokenStream tokens) {
    Token forToken = Tokens_popKeyword(tokens, "for");
    Tokens_popExpected(tokens, OPEN_PAREN);
    List<Statement> init = new List<Statement>();
    Expression condition = null;
    List<Statement> step = new List<Statement>();
    if (!Tokens_isNext(tokens, ";")) {
        init.Add(tokens.parseStatement(tokens, true));
        while (Tokens_popIfPresent(tokens, ",")) {
            init.Add(tokens.parseStatement(tokens, true));
        }
    }

    Tokens_popExpected(tokens, ";");
    if (!Tokens_isNext(tokens, ";")) {
        condition = ParseExpression(tokens);
    }
    Tokens_popExpected(tokens, ";");

    if (!Tokens_isNext(tokens, CLOSE_PAREN)) {
        step.Add(tokens.parseStatement(tokens, true));
        while (Tokens_popIfPresent(tokens, ",")) {
            step.Add(tokens.parseStatement(tokens, true));
        }
    }
    Tokens_popExpected(tokens, CLOSE_PAREN);

    Array<Statement> code = tokens.parseCodeBlock(tokens, false);

    return Statement_createForLoop(forToken, Core.ListToArray(init), condition, Core.ListToArray(step), code);
}

Statement ParseTry(TokenStream tokens) {
    Token tryToken = Tokens_popKeyword(tokens, "try");
    Array<Statement> tryCode = tokens.parseCodeBlock(tokens, true);
    List<CatchChunk> catches = new List<CatchChunk>();
    Token finallyToken = null;
    Array<Statement> finallyCode = null;
    while (Tokens_isNext(tokens, "catch")) {
        Tokens_popKeyword(tokens, "catch");
        List<Array<Token>> classNamesRaw = new List<Array<Token>>();
        Token exceptionVarToken = null;
        Tokens_popExpected(tokens, "(");
        Token mysteryToken = Tokens_popName(tokens, "exception name or variable");
        Tokens_ensureMore(tokens);
        if (Tokens_popIfPresent(tokens, ")")) {
            // single variable catch
            exceptionVarToken = mysteryToken;
        } else {
            List<Token> classNameBuilder = new List<Token>();
            classNameBuilder.Add(mysteryToken);
            while (Tokens_popIfPresent(tokens, ".")) {
                classNameBuilder.Add(Tokens_popName(tokens, "exception name"));
            }
            classNamesRaw.Add(Core.ListToArray(classNameBuilder));
            while (Tokens_popIfPresent(tokens, "|")) {
                classNameBuilder.Clear();
                classNameBuilder.Add(Tokens_popName(tokens, "exception name"));
                while (Tokens_popIfPresent(tokens, ".")) {
                    classNameBuilder.Add(Tokens_popName(tokens, "exception name"));
                }
                classNamesRaw.Add(Core.ListToArray(classNameBuilder));
            }

            if (!Tokens_isNext(tokens, CLOSE_PAREN)) {
                exceptionVarToken = Tokens_popName(tokens, "exception variable name");
            }
            Tokens_popExpected(tokens, CLOSE_PAREN);
        }

        Array<Statement> catchCode = tokens.parseCodeBlock(tokens, true);
        catches.Add(CatchChunk_new(
            catchCode,
            classNamesRaw,
            exceptionVarToken));
    }

    if (Tokens_isNext(tokens, "finally")) {
        finallyToken = Tokens_popKeyword(tokens, "finally");
        finallyCode = tokens.parseCodeBlock(tokens, true);
    } else {
        finallyCode = new Array<Statement>(0);
    }

    return Statement_createTry(tryToken, tryCode, Core.ListToArray(catches), finallyToken, finallyCode);
}

Statement ParseWhileLoop(TokenStream tokens) {
    Token whileToken = Tokens_popKeyword(tokens, "while");
    Tokens_popExpected(tokens, OPEN_PAREN);
    Expression condition = ParseExpression(tokens);
    Tokens_popExpected(tokens, CLOSE_PAREN);
    Array<Statement> code = tokens.parseCodeBlock(tokens, false);
    return Statement_createWhileLoop(whileToken, condition, code);
}
