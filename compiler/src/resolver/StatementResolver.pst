
Statement StatementResolver_ResolveStatementFirstPass(Resolver resolver, Statement s) {
    switch (s.type) {
        case StatementType.ASSIGNMENT: return StatementResolver_FirstPass_Assignment(resolver, s);
        case StatementType.BREAK: return StatementResolver_FirstPass_Break(resolver, s);
        case StatementType.CONTINUE: return StatementResolver_FirstPass_Continue(resolver, s);
        case StatementType.DO_WHILE_LOOP: return StatementResolver_FirstPass_DoWhileLoop(resolver, s);
        case StatementType.FOR_EACH_LOOP: return StatementResolver_FirstPass_ForEachLoop(resolver, s);
        case StatementType.FOR_LOOP: return StatementResolver_FirstPass_ForLoop(resolver, s);
        case StatementType.IF_STATEMENT: return StatementResolver_FirstPass_IfStatement(resolver, s);
        case StatementType.SWITCH_STATEMENT: return StatementResolver_FirstPass_SwitchStatement(resolver, s);
        case StatementType.TRY: return StatementResolver_FirstPass_Try(resolver, s);
        case StatementType.WHILE_LOOP: return StatementResolver_FirstPass_WhileLoop(resolver, s);

        case StatementType.RETURN:
        case StatementType.THROW:
        case StatementType.EXPRESSION_AS_STATEMENT:
            s.expression = ExpressionResolver_ResolveExpressionFirstPass(resolver, s.expression);
            break;

        default:
            fail("Not implemented");
            break;
    }
    return s;
}

Statement StatementResolver_ResolveStatementSecondPass(Resolver resolver, Statement s) {
    switch (s.type) {
        case StatementType.ASSIGNMENT: return StatementResolver_SecondPass_Assignment(resolver, s);
        case StatementType.BREAK: return StatementResolver_SecondPass_Break(resolver, s);
        case StatementType.CONTINUE: return StatementResolver_SecondPass_Continue(resolver, s);
        case StatementType.DO_WHILE_LOOP: return StatementResolver_SecondPass_DoWhileLoop(resolver, s);
        case StatementType.EXPRESSION_AS_STATEMENT: return StatementResolver_SecondPass_ExpressionAsStatement(resolver, s);
        case StatementType.FOR_LOOP: return StatementResolver_SecondPass_ForLoop(resolver, s);
        case StatementType.FOR_EACH_LOOP: return StatementResolver_SecondPass_ForEachLoop(resolver, s);
        case StatementType.IF_STATEMENT: return StatementResolver_SecondPass_IfStatement(resolver, s);
        case StatementType.RETURN: return StatementResolver_SecondPass_Return(resolver, s);
        case StatementType.SWITCH_STATEMENT: return StatementResolver_SecondPass_SwitchStatement(resolver, s);
        case StatementType.THROW: return StatementResolver_SecondPass_ThrowStatement(resolver, s);
        case StatementType.TRY: return StatementResolver_SecondPass_TryStatement(resolver, s);
        case StatementType.WHILE_LOOP: return StatementResolver_SecondPass_WhileLoop(resolver, s);
    }

    fail("Not implemented");
    return null;
}

////// HELPERS 

void StatementResolver_ResolveStatementArrayFirstPass(Resolver resolver, Array<Statement> arr) {
    for (int i = 0; i < arr.Size(); i += 1) {
        arr[i] = StatementResolver_ResolveStatementFirstPass(resolver, arr[i]);
    }
}

void StatementResolver_ResolveStatementArraySecondPass(Resolver resolver, Array<Statement> arr) {
    for (int i = 0; i < arr.Size(); i += 1) {
        arr[i] = StatementResolver_ResolveStatementSecondPass(resolver, arr[i]);
    }
}

////// FIRST PASS 

Statement StatementResolver_FirstPass_Assignment(Resolver resolver, Statement assign) {
    assign.assignTarget = ExpressionResolver_ResolveExpressionFirstPass(resolver, assign.assignTarget);
    assign.assignValue = ExpressionResolver_ResolveExpressionFirstPass(resolver, assign.assignValue);

    if (assign.assignTarget.type == ExpressionType.VARIABLE) {
        // register that this variable was assigned to in this variable scope
        ((FunctionEntity)resolver.activeEntity.specificData).variableScope[assign.assignTarget.strVal] = true;
    }

    return assign;
}

Statement StatementResolver_FirstPass_Break(Resolver resolver, Statement br) {
    if (resolver.breakContext == null) {
        Errors_Throw(br.firstToken, "The 'break' keyword can only be used inside loops and switch statements.");
    } else if (resolver.breakContext.type == StatementType.TRY) {
        Errors_Throw(br.firstToken, "The 'break' keyword cannot be used inside a try/catch/finally block");
    }

    return br;
}

Statement StatementResolver_FirstPass_Continue(Resolver resolver, Statement cont) {
    if (resolver.breakContext == null) {
        Errors_Throw(cont.firstToken, "The 'continue' keyword can only be used inside loops.");
    } else if (resolver.breakContext.type == StatementType.SWITCH_STATEMENT) {
        Errors_Throw(cont.firstToken, "The 'continue' keyword cannot be used in switch statements, even if nested in a loop.");
    } else if (resolver.breakContext.type == StatementType.TRY) {
        Errors_Throw(cont.firstToken, "The 'continue' keyword cannot be used inside a try/catch/finally block");
    }

    return cont;
}

Statement StatementResolver_FirstPass_DoWhileLoop(Resolver resolver, Statement doWhileLoop) {
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = doWhileLoop;
    StatementResolver_ResolveStatementArrayFirstPass(resolver, doWhileLoop.code);
    resolver.breakContext = oldBreakContext;
    doWhileLoop.condition = ExpressionResolver_ResolveExpressionFirstPass(resolver, doWhileLoop.condition);
    return doWhileLoop;
}

Statement StatementResolver_FirstPass_ForEachLoop(Resolver resolver, Statement forEachLoop) {
    forEachLoop.autoId = EntityResolver_GetNextAutoVarId(resolver);
    forEachLoop.expression = ExpressionResolver_ResolveExpressionFirstPass(resolver, forEachLoop.expression);
    ((FunctionEntity)resolver.activeEntity.specificData).variableScope[forEachLoop.varToken.Value] = true;
    StatementResolver_ResolveStatementArrayFirstPass(resolver, forEachLoop.code);
    return forEachLoop;
}

Statement StatementResolver_FirstPass_ForLoop(Resolver resolver, Statement forLoop) {
    StatementResolver_ResolveStatementArrayFirstPass(resolver, forLoop.forInit);
    forLoop.condition = ExpressionResolver_ResolveExpressionFirstPass(resolver, forLoop.condition);
    StatementResolver_ResolveStatementArrayFirstPass(resolver, forLoop.forStep);

    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = forLoop;
    StatementResolver_ResolveStatementArrayFirstPass(resolver, forLoop.code);
    resolver.breakContext = oldBreakContext;
    return forLoop;
}

Statement StatementResolver_FirstPass_IfStatement(Resolver resolver, Statement ifStatement) {
    ifStatement.condition = ExpressionResolver_ResolveExpressionFirstPass(resolver, ifStatement.condition);
    StatementResolver_ResolveStatementArrayFirstPass(resolver, ifStatement.code);
    StatementResolver_ResolveStatementArrayFirstPass(resolver, ifStatement.elseCode);
    return ifStatement;
}

Statement StatementResolver_FirstPass_SwitchStatement(Resolver resolver, Statement switchStmnt) {
    int j = 0;
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = switchStmnt;
    switchStmnt.condition = ExpressionResolver_ResolveExpressionFirstPass(resolver, switchStmnt.condition);
    for (int i = 0; i < switchStmnt.switchChunks.Size(); i += 1) {
        SwitchChunk chunk = switchStmnt.switchChunks[i];
        for (j = 0; j < chunk.Cases.Size(); j += 1) {
            Expression expr = chunk.Cases[j];
            if (expr != null) {
                chunk.Cases[j] = ExpressionResolver_ResolveExpressionFirstPass(resolver, expr);
            }
        }

        for (j = 0; j < chunk.Code.Size(); j += 1) {
            chunk.Code[j] = StatementResolver_ResolveStatementFirstPass(resolver, chunk.Code[j]);
        }
    }
    resolver.breakContext = oldBreakContext;
    return switchStmnt;
}

Statement StatementResolver_FirstPass_Try(Resolver resolver, Statement tryStatement) {
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = tryStatement;
    StatementResolver_ResolveStatementArrayFirstPass(resolver, tryStatement.code);
    for (int i = 0; i < tryStatement.catchChunks.Size(); i += 1) {
        CatchChunk cc = tryStatement.catchChunks[i];
        if (cc.exceptionVarName != null) {
            ((FunctionEntity)resolver.activeEntity.specificData).variableScope[cc.exceptionVarName.Value] = true;
        }

        if (cc.ExceptionNames.Size() > 0) {
            // TODO: the code for resolving a dotted name for a class (particularly in the base class resolution) needs 
            // to be refactored and used here as well.
            fail("Not implemented");
        } else {
            cc.IsCatchAll = true;
            cc.ClassDefinitions = new Array<ClassEntity>(0);
        }

        StatementResolver_ResolveStatementArrayFirstPass(resolver, cc.Code);
    }

    // TODO: check order and redundancy of exceptions.

    StatementResolver_ResolveStatementArrayFirstPass(resolver, tryStatement.finallyCode);

    resolver.breakContext = oldBreakContext;

    return tryStatement;
}

Statement StatementResolver_FirstPass_WhileLoop(Resolver resolver, Statement whileLoop) {
    whileLoop.condition = ExpressionResolver_ResolveExpressionFirstPass(resolver, whileLoop.condition);
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = whileLoop;
    StatementResolver_ResolveStatementArrayFirstPass(resolver, whileLoop.code);
    resolver.breakContext = oldBreakContext;
    return whileLoop;
}

////// SECOND PASS 

Statement StatementResolver_SecondPass_Assignment(Resolver resolver, Statement assignment) {
    assignment.assignTarget = ExpressionResolver_ResolveExpressionSecondPass(resolver, assignment.assignTarget);
    assignment.assignValue = ExpressionResolver_ResolveExpressionSecondPass(resolver, assignment.assignValue);

    Expression target = assignment.assignTarget;
    switch (target.type) {
        case ExpressionType.INDEX:
        case ExpressionType.DOT_FIELD:
        case ExpressionType.VARIABLE:
            // These are fine.
            break;

        default:
            Errors_Throw(assignment.assignOp, "Invalid assignment. Cannot assign to this type of expression.");
            break;
    }

    return assignment;
}

Statement StatementResolver_SecondPass_Break(Resolver resolver, Statement br) {
    return br;
}

Statement StatementResolver_SecondPass_Continue(Resolver resolver, Statement cont) {
    return cont;
}

Statement StatementResolver_SecondPass_DoWhileLoop(Resolver resolver, Statement doWhileLoop) {
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = doWhileLoop;
    StatementResolver_ResolveStatementArraySecondPass(resolver, doWhileLoop.code);
    doWhileLoop.condition = ExpressionResolver_ResolveExpressionSecondPass(resolver, doWhileLoop.condition);
    resolver.breakContext = oldBreakContext;
    return doWhileLoop;
}

Statement StatementResolver_SecondPass_ExpressionAsStatement(Resolver resolver, Statement exprAsStmnt) {
    exprAsStmnt.expression = ExpressionResolver_ResolveExpressionSecondPass(resolver, exprAsStmnt.expression);
    switch (exprAsStmnt.expression.type) {
        case ExpressionType.FUNCTION_INVOKE:
        case ExpressionType.EXTENSION_INVOCATION:
        case ExpressionType.INLINE_INCREMENT:
            // these are fine 
            break;

        default:
            Errors_Throw(exprAsStmnt.firstToken, "This type of expression cannot exist by itself. Did you mean to assign it to a variable?");
            break;
    }

    return exprAsStmnt;
}

Statement StatementResolver_SecondPass_ForLoop(Resolver resolver, Statement forLoop) {
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = forLoop;
    StatementResolver_ResolveStatementArraySecondPass(resolver, forLoop.forInit);
    forLoop.condition = ExpressionResolver_ResolveExpressionSecondPass(resolver, forLoop.condition);
    StatementResolver_ResolveStatementArraySecondPass(resolver, forLoop.forStep);
    StatementResolver_ResolveStatementArraySecondPass(resolver, forLoop.code);
    resolver.breakContext = oldBreakContext;
    return forLoop;
}

Statement StatementResolver_SecondPass_ForEachLoop(Resolver resolver, Statement forEachLoop) {
    forEachLoop.expression = ExpressionResolver_ResolveExpressionSecondPass(resolver, forEachLoop.expression);
    StatementResolver_ResolveStatementArraySecondPass(resolver, forEachLoop.code);
    return forEachLoop;
}

Statement StatementResolver_SecondPass_IfStatement(Resolver resolver, Statement ifStatement) {
    ifStatement.condition = ExpressionResolver_ResolveExpressionSecondPass(resolver, ifStatement.condition);
    StatementResolver_ResolveStatementArraySecondPass(resolver, ifStatement.code);
    StatementResolver_ResolveStatementArraySecondPass(resolver, ifStatement.elseCode);
    return ifStatement;
}

Statement StatementResolver_SecondPass_Return(Resolver resolver, Statement ret) {
    ret.expression = ExpressionResolver_ResolveExpressionSecondPass(resolver, ret.expression);
    return ret;
}

Statement StatementResolver_SecondPass_SwitchStatement(Resolver resolver, Statement switchStmnt) {
    switchStmnt.condition = ExpressionResolver_ResolveExpressionSecondPass(resolver, switchStmnt.condition);
    int exprType = -1; // { -1: indeterminite | 1: ints | 2: strings }
    Dictionary<string, bool> strCollisions = new Dictionary<string, bool>();
    Dictionary<int, bool> intCollisions = new Dictionary<int, bool>();
    int j = 0;

    for (int i = 0; i < switchStmnt.switchChunks.Size(); i += 1) {
        SwitchChunk chunk = switchStmnt.switchChunks[i];
        for (j = 0; j < chunk.Cases.Size(); j += 1) {
            Expression expr = chunk.Cases[j];
            if (expr != null) {
                expr = ExpressionResolver_ResolveExpressionSecondPass(resolver, expr);
                chunk.Cases[j] = expr;
                if (!IsExpressionConstant(expr)) {
                    Errors_Throw(expr.firstToken, "Only constant expressions are allowed in switch statement cases.");
                }
                int currentType = -1;
                bool hadCollision = false;
                if (expr.type == ExpressionType.INTEGER_CONST) {
                    currentType = 1;
                    hadCollision = intCollisions.Contains(expr.intVal);
                    intCollisions[expr.intVal] = true;
                } else if (expr.type == ExpressionType.STRING_CONST) {
                    currentType = 2;
                    hadCollision = strCollisions.Contains(expr.strVal);
                    strCollisions[expr.strVal] = true;
                } else {
                    Errors_Throw(expr.firstToken, "Only integer and string constants are allowed to be used as switch statement cases.");
                }
                if (exprType == -1) exprType = currentType;
                if (exprType != currentType) Errors_Throw(expr.firstToken, "Switch statement cases must use the same type for all cases.");
                if (hadCollision) Errors_Throw(expr.firstToken, "Switch statement contains multiple cases with the same value.");
            }
        }

        for (j = 0; j < chunk.Code.Size(); j += 1) {
            chunk.Code[j] = StatementResolver_ResolveStatementSecondPass(resolver, chunk.Code[j]);
        }

        switch (chunk.Code[chunk.Code.Size() - 1].type) {
            case StatementType.BREAK:
            case StatementType.RETURN:
            case StatementType.THROW:
                // these are fine.
                break;

            default:
                Errors_Throw(chunk.CaseTokens[chunk.CaseTokens.Size() - 1], "This switch statement case has a fall-through.");
                break;
        }
    }

    return switchStmnt;
}

Statement StatementResolver_SecondPass_ThrowStatement(Resolver resolver, Statement throwStmnt) {
    throwStmnt.expression = ExpressionResolver_ResolveExpressionSecondPass(resolver, throwStmnt.expression);
    if (IsExpressionConstant(throwStmnt.expression)) {
        Errors_Throw(throwStmnt.expression.firstToken, "Only instances of Exception are throwable.");
    }
    return throwStmnt;
}

Statement StatementResolver_SecondPass_TryStatement(Resolver resolver, Statement tryStmnt) {
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = tryStmnt;
    StatementResolver_ResolveStatementArraySecondPass(resolver, tryStmnt.code);
    for (int i = 0; i < tryStmnt.catchChunks.Size(); i += 1) {
        CatchChunk cc = tryStmnt.catchChunks[i];
        StatementResolver_ResolveStatementArraySecondPass(resolver, cc.Code);
    }
    StatementResolver_ResolveStatementArraySecondPass(resolver, tryStmnt.finallyCode);

    resolver.breakContext = oldBreakContext;

    return tryStmnt;
}

Statement StatementResolver_SecondPass_WhileLoop(Resolver resolver, Statement whileLoop) {
    Statement oldBreakContext = resolver.breakContext;
    resolver.breakContext = whileLoop;
    whileLoop.condition = ExpressionResolver_ResolveExpressionSecondPass(resolver, whileLoop.condition);
    StatementResolver_ResolveStatementArraySecondPass(resolver, whileLoop.code);
    resolver.breakContext = oldBreakContext;
    return whileLoop;
}
