void EntityResolver_ResetAutoVarId(Resolver resolver) {
    resolver.autoVarId = 0;
}

int EntityResolver_GetNextAutoVarId(Resolver resolver) {
    int id = resolver.autoVarId;
    resolver.autoVarId += 1;
    return id;
}

void EntityResolver_DetermineMemberOffsets(ClassEntity classDef) {
    int i = 0;
    // TODO: you need to ensure that the overridden members are exclusively methods, not fields.

    if (classDef.directMemberToOffset != null) return;
    ClassEntity parent = classDef.baseClassEntity;
    if (parent != null) EntityResolver_DetermineMemberOffsets(parent);

    classDef.directMemberToOffset = new Dictionary<string, int>();
    classDef.flattenedMemberOffsetLookup = new Dictionary<string, int>();
    List<string> newDirectMembers = new List<string>();
    List<string> staticFieldNames = new List<string>();
    List<string> staticMethodNames = new List<string>();

    if (parent != null) {
        Array<string> parentKeys = parent.flattenedMemberOffsetLookup.Keys();
        for (i = 0; i < parentKeys.Size(); i += 1) {
            string parentKey = parentKeys[i];
            classDef.flattenedMemberOffsetLookup[parentKey] = parent.flattenedMemberOffsetLookup[parentKey];
        }
    }

    int nextOffset = classDef.flattenedMemberOffsetLookup.Size();
    Array<string> memberNames = Core.SortedCopyOfStringArray(classDef.classMembers.Keys());
    for (i = 0; i < memberNames.Size(); i += 1) {
        string memberName = memberNames[i];
        AbstractEntity member = classDef.classMembers[memberName];

        if (!member.isStatic &&
            (member.type == EntityType.FIELD || member.type == EntityType.FUNCTION)) {
            int offset = 0;
            if (!classDef.flattenedMemberOffsetLookup.Contains(memberName)) {
                offset = nextOffset;
                nextOffset += 1;
                newDirectMembers.Add(memberName);
                classDef.directMemberToOffset[memberName] = offset;
                classDef.flattenedMemberOffsetLookup[memberName] = offset;
            }
        }
    }

    classDef.newDirectMemberOffsets = Core.ListToArray(newDirectMembers);
}

Statement EntityResolver_ConvertFieldDefaultValueIntoSetter(FieldEntity fld) {
    if (fld.opToken == null) {
        fail(""); // only applicable to default-value-based fields.
    }

    Expression root = null;
    if (fld.baseData.isStatic) {
        root = Expression_createClassReference(null, fld.baseData.nestParent);
    } else {
        root = Expression_createThisReference(null);
    }

    Expression target = Expression_createDotField(root, null, fld.baseData.simpleName);

    Token equal = fld.opToken;

    return Statement_createAssignment(target, equal, fld.defaultValue);
}

void EntityResolver_ResolveFunctionFirstPass(Resolver resolver, FunctionEntity funcDef) {
    int i = 0;
    
    funcDef.variableScope = new Dictionary<string, bool>();

    resolver.activeEntity = funcDef.baseData;
    resolver.breakContext = null;

    for (i = 0; i < funcDef.argTokens.Size(); i += 1) {
        Token arg = funcDef.argTokens[i];
        if (funcDef.variableScope.Contains(arg.Value)) {
            Errors_Throw(arg, "There are multiple arguments named '" + arg.Value + "'.");
        }
        funcDef.variableScope[arg.Value] = true;

        Expression defVal = funcDef.argDefaultValues[i];
        if (defVal != null) funcDef.argDefaultValues[i] = ExpressionResolver_ResolveExpressionFirstPass(resolver, defVal);
    }

    List<Statement> preBaseFieldInit = new List<Statement>();
    List<Statement> postBaseFieldInit = new List<Statement>();
    List<Statement> baseCtorInvocation = new List<Statement>();

    bool isCtor = funcDef.baseData.type == EntityType.CONSTRUCTOR;
    FunctionEntity ctorEnt = null;

    if (isCtor) {
        ctorEnt = funcDef;

        Dictionary<string, AbstractEntity> siblings = Entity_getMemberLookup(resolver.staticCtx, funcDef.baseData.nestParent);


        // TODO: this is wrong. The fields should be processed in the order that they appear in the code itself.
        // This will affect runtime order of complex expressions which could have observable consequences.
        // TODO: simple constant initial values should be conveyed in the metadata and direct-copied from a template.
        // Ctrl+F for initialValues in the runtime.
        List<FieldEntity> fields = new List<FieldEntity>();
        Array<string> fieldKeys = Core.SortedCopyOfStringArray(siblings.Keys());
        for (i = 0; i < fieldKeys.Size(); i += 1) {
            AbstractEntity sibling = siblings[fieldKeys[i]];
            if (sibling.type == EntityType.FIELD && sibling.isStatic == ctorEnt.baseData.isStatic) {
                FieldEntity fe = (FieldEntity) sibling.specificData;
                if (fe.defaultValue != null) {
                    fields.Add(fe);
                }
            }
        }
        
        for (i = 0; i < fields.Size(); i += 1) {
            FieldEntity fld = fields[i];
            fld.defaultValue = ExpressionResolver_ResolveExpressionFirstPass(resolver, fld.defaultValue);
            Statement setter = EntityResolver_ConvertFieldDefaultValueIntoSetter(fld);
            if (IsExpressionConstant(fld.defaultValue)) {
                preBaseFieldInit.Add(setter);
            } else {
                postBaseFieldInit.Add(setter);
            }
        }
    }

    if (isCtor && 
        funcDef.baseData.nestParent.type == EntityType.CLASS && 
        ((ClassEntity) funcDef.baseData.nestParent.specificData).baseClassEntity != null) {
        // TODO: verify arg count
        Token baseCtor = funcDef.baseData.firstToken; // TODO: this is wrong, get the actual 'base' token
        Token baseCtorParen = funcDef.baseData.firstToken; // TODO: this is even more wrong 
        Expression baseCtorRef = Expression_createBaseCtorReference(baseCtor);
        Expression baseCtorInvoke = Expression_createFunctionInvocation(baseCtorRef, baseCtorParen, ctorEnt.baseCtorArgValues);
        Statement baseCtorStmnt = Statement_createExpressionAsStatement(baseCtorInvoke);
        baseCtorStmnt = StatementResolver_ResolveStatementFirstPass(resolver, baseCtorStmnt);
        baseCtorInvocation.Add(baseCtorStmnt);
    }

    StatementResolver_ResolveStatementArrayFirstPass(resolver, funcDef.code);

    List<Statement> flattened = new List<Statement>();
    for (i = 0; i < preBaseFieldInit.Size(); i+= 1) flattened.Add(preBaseFieldInit[i]);
    for (i = 0; i < baseCtorInvocation.Size(); i += 1) flattened.Add(baseCtorInvocation[i]);
    for (i = 0; i < postBaseFieldInit.Size(); i += 1) flattened.Add(postBaseFieldInit[i]);
    for (i = 0; i < funcDef.code.Size(); i += 1) flattened.Add(funcDef.code[i]);

    Statement lastStatement = null;
    if (flattened.Size() > 0) lastStatement = flattened[flattened.Size() - 1];
    
    bool autoReturnNeeded = lastStatement == null ||
        (lastStatement.type != StatementType.RETURN && lastStatement.type != StatementType.THROW);
    if (autoReturnNeeded) {
        flattened.Add(Statement_createReturn(null, Expression_createNullConstant(null)));
    }
    funcDef.code = Core.ListToArray(flattened);

    resolver.activeEntity = null;
    resolver.breakContext = null;
}

void EntityResolver_ResolveFunctionSecondPass(Resolver resolver, FunctionEntity funcDef) {
    int i = 0;

    resolver.activeEntity = funcDef.baseData;
    resolver.breakContext = null;

    for (i = 0; i < funcDef.argDefaultValues.Size(); i += 1) {
        Expression defVal = funcDef.argDefaultValues[i];
        if (defVal != null) {
            funcDef.argDefaultValues[i] = ExpressionResolver_ResolveExpressionSecondPass(resolver, defVal);
        }
    }

    StatementResolver_ResolveStatementArraySecondPass(resolver, funcDef.code);

    if (funcDef.code.Size() == 0 || funcDef.code[funcDef.code.Size() - 1].type != StatementType.RETURN) {
        List<Statement> newCode = new List<Statement>();
        for (i = 0; i < funcDef.code.Size(); i += 1) newCode.Add(funcDef.code[i]);

        newCode.Add(Statement_createReturn(null, Expression_createNullConstant(null)));
        funcDef.code = Core.ListToArray(newCode);
    }

    resolver.activeEntity = null;
    resolver.breakContext = null;
}

void PerformFullResolutionPassOnConstAndEnums(Resolver resolver, Array<string> resOrder) {
    for (int passNum = 1; passNum <= 2; passNum += 1) {
        for (int i = 0; i < resOrder.Size(); i += 1) {
            AbstractEntity entity = resolver.flattenedEntitiesAndEnumValues[resOrder[i]];
            resolver.activeEntity = entity;
            if (entity.type == EntityType.ENUM) {
                EnumEntity enumDef = (EnumEntity)entity.specificData;
                int memberIndex = Resolver_GetEnumMemberIndex(resolver, resOrder[i], enumDef);
                Expression val = enumDef.memberValues[memberIndex];
                if (passNum == 1) {
                    val = ExpressionResolver_ResolveExpressionFirstPass(resolver, val);
                } else {
                    val = ExpressionResolver_ResolveExpressionSecondPass(resolver, val);
                }

                if (passNum == 2 && val.type != ExpressionType.INTEGER_CONST) {
                    Errors_Throw(enumDef.memberNameTokens[memberIndex], "This enum value has a non-integer value.");
                }

                enumDef.memberValues[memberIndex] = val;
            } else {
                ConstEntity constEnt = (ConstEntity)entity.specificData;
                Expression val = constEnt.constValue;
                if (passNum == 1) {
                    val = ExpressionResolver_ResolveExpressionFirstPass(resolver, val);
                } else {
                    val = ExpressionResolver_ResolveExpressionSecondPass(resolver, val);
                    if (!IsExpressionConstant(val)) {
                        Errors_Throw(val.firstToken, "A constant expression is required here.");
                    }
                }

                constEnt.constValue = val;
            }

            resolver.activeEntity = null;
        }
    }
}

Array<ClassEntity> ResolveBaseClassesAndEstablishClassOrder(
    Resolver resolver, 
    List<ClassEntity> classes,
    Dictionary<string, AbstractEntity> flattenedEntities) {
    int i = 0;
    int j = 0;
    
    // TODO: add external module resolving as a separate feature.

    Array<ClassEntity> deterministicOrder = ClassSorter_SortClassesInDeterministicDependencyOrder(Core.ListToArray(classes), false);
    
    List<ClassEntity> finalOrder = new List<ClassEntity>();
    List<ClassEntity> baseClassRequired = new List<ClassEntity>();
    for (i = 0; i < deterministicOrder.Size(); i += 1) {
        ClassEntity e = deterministicOrder[i];
        if (e.baseClassTokens != null) {
            baseClassRequired.Add(e);
        } else {
            finalOrder.Add(e);
        }
    }
    
    for (i = 0; i < baseClassRequired.Size(); i += 1) {
        ClassEntity bc = baseClassRequired[i];
        resolver.activeEntity = bc.baseData;
        Token baseClassToken = bc.baseClassTokens[0];
        AbstractEntity bcEntity = LookupUtil_DoLookupForName(resolver, baseClassToken, baseClassToken.Value);
        if (bcEntity != null) {
            for (j = 2; j < bc.baseClassTokens.Size(); j += 2) {
                string next = bc.baseClassTokens[j].Value;
                if (bcEntity != null) {
                    Dictionary<string, AbstractEntity> lookup = Entity_getMemberLookup(resolver.staticCtx, bcEntity);
                    if (lookup.Contains(next)) {
                        bcEntity = lookup[next];
                    } else {
                        bcEntity = null;
                    }
                }
            }
        }
        if (bcEntity == null) {
            Errors_Throw(bc.baseData.firstToken, "Could not resolve base class");
            fail("Not implemented");
        }
        if (bcEntity.type != EntityType.CLASS) {
            Errors_Throw(bc.baseData.firstToken, bcEntity.fqName + " is not a valid class.");
        }

        bc.baseClassEntity = (ClassEntity)bcEntity.specificData;
        resolver.activeEntity = null;
    }

    Dictionary<string, bool> includedInOrder = new Dictionary<string, bool>();
    for (i = 0; i < baseClassRequired.Size(); i += 1) {
        ClassEntity bc = baseClassRequired[i];
        includedInOrder[bc.baseData.fqName] = false;
    }
    
    for (i = 0; i < baseClassRequired.Size(); i += 1) {
        ClassEntity bc = baseClassRequired[i];
        ClassEntity walker = bc;
        List<ClassEntity> order = new List<ClassEntity>();
        while (walker != null) {
            // If it's external or already included, stop.
            if (!includedInOrder.Contains(walker.baseData.fqName) ||
                includedInOrder[walker.baseData.fqName]) {
                walker = null;
            } else {
                order.Add(walker);
                includedInOrder[walker.baseData.fqName] = true;
                walker = walker.baseClassEntity;
            }

            if (order.Size() > deterministicOrder.Size()) {
                Errors_Throw(bc.baseData.firstToken, "This class has a cycle in its base class chain.");
            }
        }

        order.Reverse();
        for (j = 0; j < order.Size(); j += 1) {
            finalOrder.Add(order[j]);
        }
    }

    return Core.ListToArray(finalOrder);
}
