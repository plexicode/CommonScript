struct Resolver {
    StaticContext staticCtx;
    Dictionary<string, AbstractEntity> nestedEntities;
    Dictionary<string, AbstractEntity> enumsByMemberFqName;
    Dictionary<string, AbstractEntity> flattenedEntities;
    Dictionary<string, AbstractEntity> flattenedEntitiesAndEnumValues;
    Dictionary<string, AbstractEntity> flattenedEntitiesNoEnumParents;
    List<FunctionEntity> lambdas;
    AbstractEntity activeEntity;
    Array<AbstractEntity> entityList;
    Statement breakContext;
    int autoVarId;
    StringSet extensionNames;
}

Resolver Resolver_new(StaticContext staticCtx, Dictionary<string, AbstractEntity> rootEntities, List<string> extensionNames) {
    Resolver r = new Resolver(
        staticCtx,
        rootEntities, // nested entities
        new Dictionary<string, AbstractEntity>(), // enumsByMemberFqName
        new Dictionary<string, AbstractEntity>(), // flattenedEntities
        new Dictionary<string, AbstractEntity>(), // flattenedEntitiesAndEnumValues
        new Dictionary<string, AbstractEntity>(), // flattenedEntitiesNoEnumParents
        new List<FunctionEntity>(), // lambdas
        null, // activeEntity
        null, // entityList
        null, // breakContext
        0, // autoVarId
        StringSet_fromList(extensionNames) // nested entities
    );

    r.entityList = FlattenEntities(staticCtx, rootEntities);

    for (int i = 0; i < r.entityList.Size(); i += 1) {
        AbstractEntity tle = r.entityList[i];
        r.flattenedEntities[tle.fqName] = tle;
        r.flattenedEntitiesAndEnumValues[tle.fqName] = tle;
        if (tle.type == EntityType.ENUM) {
            EnumEntity enumDef = (EnumEntity) tle.specificData;
            for (int j = 0; j < enumDef.memberNameTokens.Size(); j++) {
                string fqName = enumDef.baseData.fqName + "." + enumDef.memberNameTokens[j].Value;
                r.enumsByMemberFqName[fqName] = enumDef.baseData;
                r.flattenedEntitiesAndEnumValues[fqName] = enumDef.baseData;
                r.flattenedEntitiesNoEnumParents[fqName] = enumDef.baseData;
            }
        } else {
            r.flattenedEntitiesNoEnumParents[tle.fqName] = tle;
        }
    }

    return r;
}

Array<AbstractEntity> FlattenEntities(StaticContext staticCtx, Dictionary<string, AbstractEntity> rootEntities) {
    List<AbstractEntity> output = new List<AbstractEntity>();
    List<AbstractEntity> queue = new List<AbstractEntity>();

    // TODO: surely there's a way to copy an Array to a List in Pastel.
    // If not, it needs to be added.
    Array<AbstractEntity> arrTemp = rootEntities.Values();
    for (int j = 0; j < arrTemp.Size(); j += 1) {
        queue.Add(arrTemp[j]);
    }

    for (int i = 0; i < queue.Size(); i += 1) {
        AbstractEntity entity = queue[i];
        output.Add(entity);

        Array<AbstractEntity> lookupMembers = Entity_getMemberLookup(staticCtx, entity).Values();
        for (j = 0; j < lookupMembers.Size(); j += 1) {
            AbstractEntity mem = lookupMembers[j];
            queue.Add(mem);
        }
    }

    return Core.ListToArray(output);
}

// Returns strings because we treat the individual enum values as separate entities.
Array<string> Resolver_DetermineConstAndEnumResolutionOrder(
    Resolver resolver,
    List<ConstEntity> constants,
    List<EnumEntity> enums) {

    int i = 0;

    Dictionary<string, List<string>> referencesMadeByFqItem = new Dictionary<string, List<string>>();

    // You left off thinking about how to register references found in the expression resolver
    // out here and then using that to build up the references lookup.
    // Then you were thinking about how this only pertains to the first pass, that really this
    // function should do both passes and be renamed to ResolveConstantsAndEnums()

    for (i = 0; i < constants.Size(); i += 1) {
        ConstEntity c = constants[i];
        string ns = "";
        if (c.baseData.nestParent != null) ns = c.baseData.nestParent.fqName;

        List<string> refsOut = new List<string>();
        c.constValue = Resolver_GetListOfUnresolvedConstReferences(resolver, c.baseData.fileContext, ns, c.constValue, refsOut);
        referencesMadeByFqItem[c.baseData.fqName] = refsOut;
    }

    for (i = 0; i < enums.Size(); i += 1) {
        EnumEntity e = enums[i];
        string ns = "";
        if (e.baseData.nestParent != null) ns = e.baseData.nestParent.fqName;

        int memCount = e.memberNameTokens.Size();

        for (int j = 0; j < memCount; j++) {
            string memFqName = e.baseData.fqName + "." + e.memberNameTokens[j].Value;
            Expression val = e.memberValues[j];
            List<string> refsOut = new List<string>();
            e.memberValues[j] = Resolver_GetListOfUnresolvedConstReferences(resolver, e.baseData.fileContext, ns, val, refsOut);
            referencesMadeByFqItem[memFqName] = refsOut;
        }
    }

    // 0 - unresolved, 1 - resolving, 2 - resolved
    Dictionary<string, int> resolutionStatus = new Dictionary<string, int>();
    List<string> resolutionOrder = new List<string>();

    List<string> q = StringArrayToList(Core.SortedCopyOfStringArray(referencesMadeByFqItem.Keys()));
    q.Reverse();

    while (q.Size() > 0) {
        int lastIndex = q.Size() - 1;
        string itemFqName = q[lastIndex];
        q.RemoveAt(lastIndex);
        if (itemFqName == "*") {
            // indicator that the next item has all prerequisites added to the list.
            // it is now safe to add it to the list.
            string resolvedItem = q[lastIndex - 1];
            q.RemoveAt(lastIndex - 1);
            resolutionStatus[resolvedItem] = 2;
            resolutionOrder.Add(resolvedItem);
        } else {
            AbstractEntity item = resolver.flattenedEntitiesAndEnumValues[itemFqName];
            Token itemToken = item.firstToken;

            if (item.fqName != itemFqName) { // an enum member
                EnumEntity parentEnum = (EnumEntity)item.specificData;
                int enumValIndex = Resolver_GetEnumMemberIndex(resolver, itemFqName, parentEnum);
                itemToken = parentEnum.memberNameTokens[enumValIndex];
            }

            int status = 0;
            if (resolutionStatus.Contains(itemFqName)) status = resolutionStatus[itemFqName];

            if (status == 1) {
                Errors_Throw(item.firstToken, "This definition contains a resolution cycle.");
            }

            if (status == 2) {
                // Already resolved. Skip!
            } else {
                q.Add(itemFqName);
                q.Add("*");
                resolutionStatus[itemFqName] = 1;
                List<string> references = referencesMadeByFqItem[itemFqName];
                for (i = references.Size() - 1; i >= 0; i -= 1) {
                    q.Add(references[i]);
                }
            }
        }
    }

    return Core.ListToArray(resolutionOrder);
}

int Resolver_GetEnumMemberIndex(Resolver resolver, string memNameOrFqMemName, EnumEntity enumEntity) {
    int lastDot = memNameOrFqMemName.LastIndexOf(".");
    string memName = memNameOrFqMemName;
    if (lastDot != -1) {
        memName = memNameOrFqMemName.SubString(lastDot + 1, memNameOrFqMemName.Size() - lastDot - 1);
    }

    for (int i = 0; i < enumEntity.memberNameTokens.Size(); i += 1) {
        if (enumEntity.memberNameTokens[i].Value == memName) {
            return i;
        }
    }

    return -1;
}

Expression Resolver_GetListOfUnresolvedConstReferences(Resolver resolver, FileContext file, string fqNamespace, Expression expr, List<string> refsOut) {
    return Resolver_GetListOfUnresolvedConstReferencesImpl(resolver, file, fqNamespace, expr, refsOut);
}

Expression Resolver_GetListOfUnresolvedConstReferencesImpl(Resolver resolver, FileContext file, string fqNamespace, Expression expr, List<string> refs) {
    switch (expr.type) {
        case ExpressionType.INTEGER_CONST:
        case ExpressionType.BOOL_CONST:
        case ExpressionType.FLOAT_CONST:
        case ExpressionType.NULL_CONST:
        case ExpressionType.STRING_CONST:
            // This is fine
            return expr;

        case ExpressionType.BINARY_OP:
            expr.left = Resolver_GetListOfUnresolvedConstReferencesImpl(resolver, file, fqNamespace, expr.left, refs);
            expr.right = Resolver_GetListOfUnresolvedConstReferencesImpl(resolver, file, fqNamespace, expr.right, refs);
            return expr;

        case ExpressionType.VARIABLE:
            AbstractEntity referenced = TryDoExactLookupForConstantEntity(resolver, file, fqNamespace, expr.strVal);
            if (referenced == null) {
                Errors_Throw(expr.firstToken, "No definition for '" + expr.strVal + "'");
            } else {
                if (referenced.fileContext.compiledModule != file.compiledModule) {
                    if (referenced.type == EntityType.CONST) {
                        fail("Not implemented");
                    } else if (referenced.type == EntityType.ENUM) {
                        fail("Not implemented");
                    } else {
                        fail("Not implemented");
                    }
                }

                switch (referenced.type) {
                    case EntityType.CONST:
                        refs.Add(referenced.fqName);
                        break;
                    case EntityType.ENUM:
                        fail("Not implemented");
                        break;

                    default:
                        Errors_Throw(expr.firstToken, "Cannot refer to this entity from a constant expression.");
                        break;
                }
            }

            return expr;

        case ExpressionType.DOT_FIELD:
            Array<string> fullRefSegments = DotField_getVariableRootedDottedChain(expr, "Cannot use this type of entity from a constant expression.");
            string fullRefDotted = fullRefSegments.Join(".");
            AbstractEntity reffedEntity = TryDoExactLookupForConstantEntity(resolver, file, fqNamespace, fullRefDotted);
            if (reffedEntity == null) {
                Errors_Throw(expr.firstToken, "Invalid expression for constant.");
            }
            if (reffedEntity.fileContext.compiledModule != file.compiledModule) {
                if (reffedEntity.type == EntityType.CONST) return ((ConstEntity)reffedEntity.specificData).constValue;

                if (reffedEntity.type == EntityType.ENUM) {
                    fail("Not implemented");
                } else {
                    fail("Not implemented");
                }
            }

            if (reffedEntity.type == EntityType.CONST) {
                refs.Add(reffedEntity.fqName);
            } else if (reffedEntity.type == EntityType.ENUM) {
                string enumMemberName = fullRefSegments[fullRefSegments.Size() - 1];
                string enumName = fullRefDotted.SubString(0, fullRefDotted.Size() - enumMemberName.Size() - 1);
                refs.Add(reffedEntity.fqName + "." + enumMemberName);
            } else {
                Errors_Throw(expr.firstToken, "Cannot reference this entity from here.");
            }
            return expr;

        default:
            Errors_Throw(expr.firstToken, "Invalid expression for constant.");
            break;
    }

    return null;
}

// Finds the constant entity value given the current namespace and name.
// This will find constsants and enum values. Enum parents will be ignored.
AbstractEntity TryDoExactLookupForConstantEntity(Resolver resolver, FileContext file, string fqNamespace, string dottedEntityName) {
    // If you are using a fully-qualified name, just go with that.
    if (resolver.flattenedEntitiesNoEnumParents.Contains(dottedEntityName)) {
        return resolver.flattenedEntitiesNoEnumParents[dottedEntityName];
    }

    // Check all possible nest levels of the current namespace with the full dotted name suffixed at the end.
    // e.g. namespace = Foo.Bar, reference = Baz
    // -> check Foo.Bar.Baz
    // -> check Foo.Baz
    // no need to check just "Baz" as that was done by the previous check hence the > 0 instead of >= 0 loop condition.
    List<string> nsParts = StringArrayToList(fqNamespace.Split("."));
    while (nsParts.Size() > 0) {
        // this was originally string.Join(".", [..nsParts, .. dottedEntityName]) which seems wrong, so if it doesn't work, check this.
        // TODO: if it doesn't cause an error in the test suite, then make sure it's being covered.
        string lookupName = nsParts.Join(".") + "." + dottedEntityName;
        if (resolver.flattenedEntitiesNoEnumParents.Contains(lookupName)) {
            return resolver.flattenedEntitiesNoEnumParents[lookupName];
        }
        nsParts.RemoveAt(nsParts.Size() - 1);
    }

    // If we didn't find it, it means it doesn't exist in this module. So let's check the imported modules that
    // are scoped to a variable. This means the first segment in the reference is the import variable name.
    Array<string> entityNameSegments = dottedEntityName.Split(".");
    if (file.importsByVar.Contains(entityNameSegments[0])) {
        // If it was found, then use the rest of the dotted segment chain as a fully qualified
        // reference within that imported module.
        CompiledModule targetModule = file.importsByVar[entityNameSegments[0]].compiledModuleRef;
        string scopedName = StringArraySlice(entityNameSegments, 1, 0).Join(".");
        return CompiledModuleEntityLookup(targetModule, scopedName);
    }

    // If it wasn't found locally or in an variable-scoped import, then check the wildcard imports.
    // In these cases, the entity name is fully qualified as-is and does not require truncation.
    for (int i = 0; i < file.imports.Size(); i += 1) {
        ImportStatement imp = file.imports[i];
        if (imp.importTargetVariableName == null) {
            return CompiledModuleEntityLookup(imp.compiledModuleRef, dottedEntityName);
        }
    }

    return null;
}

AbstractEntity CompiledModuleEntityLookup(CompiledModule mod, string fqName) {
    if (mod.entitiesNoEnumParents.Contains(fqName)) {
        return mod.entitiesNoEnumParents[fqName];
    }

    string potentialEnumParentName = StringArraySlice(fqName.Split("."), 0, 1).Join(".");
    if (mod.entitiesNoEnumParents.Contains(potentialEnumParentName)) {
        return mod.entitiesNoEnumParents[potentialEnumParentName];
    }

    return null;
}

void Resolver_ReportNewLambda(Resolver resolver, FunctionEntity lamb) {
    resolver.lambdas.Add(lamb);
}

bool Resolver_isValidRegisteredExtension(Resolver resolver, string extensionName) {
    return StringSet_has(resolver.extensionNames, extensionName);
}

// For all undefined values of an enum, make it equal to the previous value + 1 by
// injecting EnumName.MemberName + 1
// If the first value is undefined, inject 1
void AddImplicitIncrementingEnumValueDefinitions(List<EnumEntity> enums) {
    for (int i = 0; i < enums.Size(); i++) {
        EnumEntity enumEnt = enums[i];
        for (int j = 0; j < enumEnt.memberNameTokens.Size(); j++) {
            Token token = enumEnt.memberNameTokens[j];
            if (enumEnt.memberValues[j] == null) {
                if (j == 0) {
                    enumEnt.memberValues[j] = Expression_createIntegerConstant(token, 1);
                } else {
                    enumEnt.memberValues[j] = Expression_createBinaryOp(
                        BuildFakeDotChain(enumEnt.baseData.simpleName, enumEnt.memberNameTokens[j - 1].Value),
                        createFakeTokenFromTemplate(token, "+", TokenType.PUNCTUATION),
                        Expression_createIntegerConstant(null, 1)
                    );
                }
            }
        }
    }
}
