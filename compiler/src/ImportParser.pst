ImportStatement ImportParser_createBuiltinImport(TokenStream tokens) {
    List<Token> builtinName = new List<Token>();
    builtinName.add(createFakeToken(tokens, TokenType.NAME, "{BUILTIN}", 0, 0));

    return ImportStatement_new(
        createFakeToken(tokens, TokenType.KEYWORD, "import", 0, 0),
        builtinName,
        createFakeToken(tokens, TokenType.PUNCTUATION, "*", 0, 0));
}


Array<ImportStatement> ImportParser_AdvanceThroughImports(TokenStream tokens, bool isCoreBuiltin) {
    List<ImportStatement> output = new List<ImportStatement>();
    if (!isCoreBuiltin) output.add(ImportParser_createBuiltinImport(tokens));

    while (Tokens_hasMore(tokens) && Tokens_isNext(tokens, "import")) {
        Token importToken = Tokens_popKeyword(tokens, "import");
        List<Token> tokenChain = new List<Token>();
        tokenChain.add(Tokens_popName(tokens, "module name"));

        while (Tokens_popIfPresent(tokens, ".")) {
            tokenChain.add(Tokens_popName(tokens, "module name"));
        }

        Token importTargetName = null;
        if (Tokens_popIfPresent(tokens, "->")) {
            if (Tokens_isNext(tokens, "*")) {
                importTargetName = Tokens_pop(tokens);
            } else {
                importTargetName = Tokens_popName(tokens, "import target variable");
            }
        }

        Tokens_popExpected(tokens, ";");

        output.add(ImportStatement_new(importToken, tokenChain, importTargetName));
    }

    return output.toArray();
}
