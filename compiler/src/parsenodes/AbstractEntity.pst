struct AbstractEntity {
    Token firstToken;
    int type;
    object specificData;
    string simpleName;
    Token nameToken;
    string fqName;
    Dictionary<string, Token> annotations;
    bool isStatic;
    AbstractEntity nestParent;
    FileContext fileContext;
    int serializationIndex;
}

AbstractEntity AbstractEntity_new(Token firstToken, int type, object specificData) {
    return new AbstractEntity(
        firstToken, 
        type, 
        specificData,
        null, // simpleName
        null, // nameToken 
        null, // fqName 
        null, // annotations 
        false, // isStatic 
        null, // nestParent 
        null, // fileContext 
        -1 // serializationIndex 
    );
}

Dictionary<string, AbstractEntity> Entity_getMemberLookup(StaticContext staticCtx, AbstractEntity entity) {
    if (entity.type == EntityType.CLASS) return ((ClassEntity)entity.specificData).classMembers;
    if (entity.type == EntityType.NAMESPACE) return ((NamespaceEntity)entity.specificData).nestedMembers;
    if (entity.type == EntityType.MODULE_REF) return ((ModuleWrapperEntity)entity.specificData).publicMembers;
    return staticCtx.emptyLookup;
}
