// TODO: move this into Pastel as a direct platform method.
Array<int> StringToUnicodeArray(string strVal) {
    Array<int> bytes = strVal.ToUtf8Bytes();
    Array<int> output = new Array<int>(bytes.Size());
    int length = bytes.Size();
    int c = 0;
    int i = 0;
    int j = 0;
    int val = 0;
    // 11110000 -> 0xF0 | 11100000 -> 0xE0 | 11000000 -> 0xC0 | 10000000 -> 0x80
    while (i < length) {
        c = bytes[i];
        if (c < 128) {
            output[j] = c;
            i += 1;
        } else if ((c & 0xE0) == 0xC0) { // 2 bytes
            output[j] = ((c & 0x1F) << 6) | (bytes[i + 1] & 0x3F);
            i += 2;
        } else if ((c & 0xF0) == 0xE0) { // 3 bytes
            output[j] = ((c & 0x0F) << 12) | ((bytes[i + 1] & 0x3F) << 6) | (bytes[i + 2] & 0x3F);
            i += 3;
        } else if ((c & 0xF0) == 0xE0) { // 4 bytes
            output[j] = ((c & 0x07) << 18) | ((bytes[i + 1] & 0x3F) << 12) | ((bytes[i + 2] & 0x3F) << 6) | (bytes[i + 3] & 0x3F);
            i += 4;
        } else {
            return null;
        }
        j += 1;
    }

    if (j < length) {
        Array<int> trimmedOutput = new Array<int>(j);
        while (j > 0) {
            j -= 1;
            trimmedOutput[j] = output[j];
        }
        output = trimmedOutput;
    }
    return output;
}

string UnicodeArrayToString(Array<int> chars) {
    return UnicodeArrayToString_slice(chars, 0, chars.Size());
}

string UnicodeArrayToString_slice(Array<int> chars, int start, int length) {
    List<string> sb = new List<string>();
    int end = start + length;
    for (int i = start; i < end; i += 1) {
        sb.Add(Core.StringFromCharCode(chars[i]));
    }
    return sb.Join("");
}
