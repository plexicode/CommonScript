string FloatToStringWorkaround(double val) {
    string str = Convert.floatToString(val);
    // This is a Pastel bug. .0 is being appended when '.' is not included.
    str = str.toLower();
    if (str.contains("e") && str.endsWith(".0")) {
        str = str.subString(0, str.size() - 2).replace("e", ".0e");
    }
    return str;
}

string PadIntegerToSize(int n, int size) {
    string o = Convert.intToString(n);
    while (o.size() < size) o = "0" + o;
    return o;
}


// Given a lookup table of strings to number of times they're used, sort them
// by their frequency, descending. Use the string itself as a tie-breaker.
Array<string> OrderStringsByDescendingFrequencyUsingLookup(
    Dictionary<string, int> frequencyLookupByKey) {

    int total = 0;
    int i = 0;
    Array<string> values = frequencyLookupByKey.keys();
    for (i = 0; i < values.size(); i += 1) {
        total += frequencyLookupByKey[values[i]];
    }

    int padSize = Convert.intToString(total).size() + 1;
    Dictionary<string, string> valueByLexicalSortKey = new Dictionary<string, string>();
    for (i = 0; i < values.size(); i += 1) {
        string value = values[i];
        string key = PadIntegerToSize(total - frequencyLookupByKey[value], padSize) + ":" + value;
        valueByLexicalSortKey[key] = value;
    }

    Array<string> keys = Sorting.getLexicalSortedCopy(valueByLexicalSortKey.keys());
    List<string> output = new List<string>();
    for (i = 0; i < keys.size(); i += 1) {
        output.add(valueByLexicalSortKey[keys[i]]);
    }

    return output.toArray();
}

Array<string> StringArraySlice(Array<string> arr, int skipStart, int skipEnd) {
    int srcLen = arr.size();
    int dstLen = srcLen - skipStart - skipEnd;
    Array<string> output = new Array<string>(dstLen);
    for (int i = 0; i < dstLen; i += 1) {
        output[i] = arr[skipStart + i];
    }
    return output;
}

List<string> StringArrayToList(Array<string> arr) {
    List<string> output = new List<string>();
    for (int i = 0; i < arr.size(); i += 1) {
        output.add(arr[i]);
    }
    return output;
}
