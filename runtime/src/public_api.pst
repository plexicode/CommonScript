object PUBLIC_initializeExecutionContext(
    Array<int> rawBytes,
    Dictionary<string, Func<object, object, Array<object>>> extensions,
    object appCtx,
    Func<object, object> onLastTaskComplete) {

    return new_ExecutionContext(rawBytes, extensions, appCtx, onLastTaskComplete);
}

string PUBLIC_getExecutionContextError(object ecObj) {
    ExecutionContext ec = (ExecutionContext) ecObj;
    return ec.errMsg;
}

object PUBLIC_startMainTask(object ecObj, Array<string> args) {
    ExecutionTask mainTask = createMainTask((ExecutionContext) ecObj, args);
    return PUBLIC_resumeTask(mainTask);
}

object PUBLIC_resumeTask(object taskObj) {
    return RunInterpreter((ExecutionTask) taskObj);
}

int PUBLIC_getTaskResultStatus(object resObj) {
    ExecutionResult result = (ExecutionResult) resObj;
    return result.type;
}

int PUBLIC_getTaskResultSleepAmount(object resObj) {
    ExecutionResult result = (ExecutionResult) resObj;
    return result.sleepMillis;
}

object PUBLIC_getExecutionContextFromTask(object taskObj) {
    return ((ExecutionTask)taskObj).execCtx;
}

object PUBLIC_createTaskForFunction(object ecCtx, object fpValueNoArgs) {
    return PUBLIC_createTaskForFunctionWithWrappedArgs(ecCtx, fpValueNoArgs, new Array<object>(0));
}

object PUBLIC_createTaskForFunctionWithWrappedArgs(object ecCtx, object fpValue, Array<object> wrappedArgs) {
    int argc = wrappedArgs.size();
    Array<Value> args = new Array<Value>(argc);
    for (int i = 0; i < argc; i += 1) {
        args[i] = (Value) wrappedArgs[i];
    }
    return createNewTask((ExecutionContext) ecCtx, (Value) fpValue, args);
}

Array<string> PUBLIC_getTaskResultError(object resObj, bool includeStackTrace) {
    ExecutionResult result = (ExecutionResult) resObj;
    List<string> o = new List<string>();
    if (result.type != ExecutionResultType.HARD_CRASH) return null;

    o.add(result.errorMessage);
    List<string> tr = result.stackTrace;
    if (tr != null) {
        for (int i = 0; i < tr.size(); i += 1) {
            o.add(tr[i]);
        }
    }
    return o.toArray();
}

void PUBLIC_setTaskStackTopValue(object taskObj, Value newValue) {
    ExecutionTask task = (ExecutionTask) taskObj;
    int valueStackSize = task.stack.valueStackSize;
    if (valueStackSize > 0) {
        task.valueStack[valueStackSize - 1] = newValue;
    }
}

string PUBLIC_valueToString(object valueObj) {
    return valueToHumanString((Value) valueObj);
}

object PUBLIC_wrapNativeHandle(object val) {
    return new Value(Type.NATIVE_HANDLE, val);
}

GlobalValues getGlobalsFromTask(object taskObj) {
    return ((ExecutionTask) taskObj).execCtx.globalValues;
}

Value PUBLIC_wrapBoolean(object taskObj, bool val) {
    GlobalValues g = getGlobalsFromTask(taskObj);
    if (val) return g.trueValue;
    return g.falseValue;
}

Value PUBLIC_wrapInteger(object taskObj, int val) {
    GlobalValues g = getGlobalsFromTask(taskObj);
    return buildInteger(g, val);
}

Value PUBLIC_wrapString(object taskObj, string val, bool isCommon) {
    GlobalValues g = getGlobalsFromTask(taskObj);
    return buildString(g, val, isCommon);
}

int PUBLIC_unwrapInteger(object val) {
    return (int) ((Value) val).internalValue;
}

double PUBLIC_unwrapFloat(object val) {
    return 1.0 * (double) ((Value) val).internalValue;
}

object PUBLIC_unwrapNativeHandle(object val) {
    return ((Value) val).internalValue;
}

void PUBLIC_listValueAdd(object listObj, object wrappedValue) {
    ListImpl list = (ListImpl) ((Value) listObj).internalValue;
    List_add(list, (Value) wrappedValue);
}

object PUBLIC_listGet(object listObj, int i) {
    return ((ListImpl)((Value) listObj).internalValue).items[i];
}

void PUBLIC_listSet(object listObj, int i, object valObj) {
    ((ListImpl)((Value) listObj).internalValue).items[i] = (Value) valObj;
}

int PUBLIC_listLength(object listObj) {
    return ((ListImpl)((Value) listObj).internalValue).items.size();
}

void PUBLIC_requestTaskSuspension(object taskObj, bool withSleep, int sleepMillis) {
    ExecutionTask task = (ExecutionTask) taskObj;
    task.suspendRequested = true;
    if (sleepMillis < 0) sleepMillis = 0;
    if (withSleep) {
        task.sleepMillis = sleepMillis;
    } else {
        task.sleepMillis = -1;
    }
}

object PUBLIC_getApplicationContextFromTask(object taskObj) {
    ExecutionTask task = (ExecutionTask) taskObj;
    return task.execCtx.appCtx;
}
