valueStackSize -= 3;
if (row.firstArg == 0) {
    value = valueStack[valueStackSize];
    left = valueStack[valueStackSize + 1];
    right = valueStack[valueStackSize + 2];
} else {
    // incremental assignment will have these on the stack in a different order...
    left = valueStack[valueStackSize];
    right = valueStack[valueStackSize + 1];
    value = valueStack[valueStackSize + 2];
}

switch (left.type * Type.MAX + right.type) {
    case Type.LIST * Type.MAX + Type.INTEGER:
        i = (int) right.internalValue;
        listImpl1 = (ListImpl) left.internalValue;
        if (i < 0) {
            i += listImpl1.length;
            if (i < 0) bool1 = true;
            else bool1 = false;
        } else if (i >= listImpl1.length) {
            bool1 = true;
        } else {
            bool1 = false;
        }

        if (bool1) {
            errorId = ExceptionTypeId.OUT_OF_RANGE;
            errorMsg = "Array is out of bounds.";
            @import("macros/throw.pst");
        } else {
            listImpl1.items[i] = value;
        }
        break;

    case Type.DICTIONARY * Type.MAX + Type.STRING:
        stringImpl1 = (StringImpl) right.internalValue;
        if (stringImpl1.isBuilder) stringFlatten(stringImpl1);
        str1 = stringImpl1.nativeStr;

        dictImpl1 = (DictImpl) left.internalValue;

        if (dictImpl1.keyType == Type.NULL) {
            dictImpl1.keyType = Type.STRING;
            dictImpl1.strKeyLookup = new Dictionary<string, int>();
            dictImpl1.strKeyLookup[str1] = 0;
            dictImpl1.keys = new Array<Value>(4);
            dictImpl1.values = new Array<Value>(4);
            dictImpl1.capacity = 4;
            dictImpl1.keys[0] = right;
            dictImpl1.values[0] = value;
            dictImpl1.size = 1;
        } else if (dictImpl1.keyType == Type.STRING) {
            if (dictImpl1.size == dictImpl1.capacity) DictImpl_ensureCapacity(dictImpl1);

            if (dictImpl1.strKeyLookup.Contains(str1)) {
                dictImpl1.values[dictImpl1.strKeyLookup[str1]] = value;
            } else {
                i = dictImpl1.size;
                dictImpl1.size = i + 1;
                dictImpl1.keys[i] = right;
                dictImpl1.values[i] = value;
                dictImpl1.strKeyLookup[str1] = i;
            }
        } else {
            errorId = ExceptionTypeId.INVALID_ARGUMENT;
            errorMsg = "Cannot mix types of dictionary keys in the same dictionary.";
            @import("macros/throw.pst");
        }
        break;

    case Type.DICTIONARY * Type.MAX + Type.INTEGER:

        int1 = (int) right.internalValue;

        dictImpl1 = (DictImpl) left.internalValue;

        if (dictImpl1.keyType == Type.NULL) {
            dictImpl1.keyType = Type.INTEGER;
            dictImpl1.intKeyLookup = new Dictionary<int, int>();
            dictImpl1.intKeyLookup[int1] = 0;
            dictImpl1.keys = new Array<Value>(4);
            dictImpl1.values = new Array<Value>(4);
            dictImpl1.capacity = 4;
            dictImpl1.keys[0] = right;
            dictImpl1.values[0] = value;
            dictImpl1.size = 1;
        } else {
            if (dictImpl1.size == dictImpl1.capacity) DictImpl_ensureCapacity(dictImpl1);

            if (dictImpl1.intKeyLookup.Contains(int1)) {
                dictImpl1.values[dictImpl1.intKeyLookup[int1]] = value;
            } else {
                i = dictImpl1.size;
                dictImpl1.size = i + 1;
                dictImpl1.keys[i] = right;
                dictImpl1.values[i] = value;
                dictImpl1.intKeyLookup[int1] = i;
            }
        }
        break;

    default:
        errorId = ExceptionTypeId.INVALID_ARGUMENT;
        errorMsg = "Cannot assign an index to this type.";
        @import("macros/throw.pst");
}
