valueStackSize -= 2;
if (row.firstArg == 0){
    right = valueStack[valueStackSize];
    left = valueStack[valueStackSize + 1];
} else {
    left = valueStack[valueStackSize];
    right = valueStack[valueStackSize + 1];
}

switch (left.type) {
    case Type.INSTANCE:
        instance1 = (Instance) left.internalValue;

        // TODO: separate lookup of visible mutable fields. When the field isn't found, then do more specific lookups for proper error messaging.
        if (!instance1.classDef.nameToOffset.contains(row.stringArg)) {
            errorId = ExceptionTypeId.FIELD_NOT_FOUND;
            errorMsg = "The " + instance1.classDef.name + " class does not have a field named ." + row.stringArg + " and therefore cannot be assigned to.";
            @import("macros/throw.pst");
        } else {
            int1 = instance1.classDef.nameToOffset[row.stringArg];
            instance1.members[int1] = right;
        }
        break;

    case Type.CLASS:
        classDef = (ClassInfo) left.internalValue;
        str1 = row.stringArg;
        if (classDef.staticMemberIsMutable[str1]) {
            classDef.staticMembers[str1] = right;
        } else {
            errorId = ExceptionTypeId.IMMUTABLE_DATA;
            errorMsg = "Static methods cannot be overwritten.";
            @import("macros/throw.pst");
        }
        break;

    default:
        errorId = ExceptionTypeId.FIELD_NOT_FOUND;
        errorMsg = "Cannot assign fields on this type.";
        @import("macros/throw.pst");
}
